#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 127
#define YY_END_OF_BUFFER 128
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[894] =
    {   0,
        0,    0,    2,    2,  128,  126,    4,    4,  126,  119,
      126,  119,  119,  122,  119,  119,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    4,    0,    0,  125,    1,  121,  120,
      122,  117,  116,  118,  124,  124,  124,  124,  124,  107,
      124,  108,  124,  124,  124,  124,  124,  124,  124,  124,

      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  109,  124,  110,  111,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  112,  113,  114,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  115,  124,  124,  124,  124,  124,
      124,  124,  124,    2,    2,    2,    2,    2,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  123,  120,   94,  124,   95,  124,
      124,   96,   97,  124,  124,  124,  124,  124,  124,  124,
      124,   98,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,   99,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      100,  124,  124,  101,  124,  124,  124,  124,  124,  124,
      124,  124,  102,  124,  124,  103,  124,  124,  124,  124,

      124,  124,  124,  124,  124,  124,  124,  104,  124,  124,
      124,  124,  105,  124,  124,  124,  106,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      124,  124,  124,  124,  124,   72,  124,  124,  124,  124,
      124,   73,  124,  124,  124,  124,   74,  124,  124,  124,
       75,  124,  124,  124,  124,  124,   76,   77,   78,  124,
      124,   79,  124,   80,  124,  124,  124,  124,  124,  124,
       81,  124,   82,   83,   84,  124,   85,  124,  124,  124,
      124,   86,  124,  124,  124,  124,  124,   87,   88,  124,
      124,  124,  124,  124,  124,  124,   89,  124,  124,  124,
      124,   90,   91,  124,  124,  124,  124,  124,  124,  124,

       92,  124,  124,   93,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   54,   55,
      124,  124,  124,  124,  124,  124,  124,   56,  124,  124,

      124,   57,  124,  124,  124,  124,  124,  124,  124,  124,
      124,   58,  124,  124,  124,   59,   60,  124,  124,  124,
      124,   61,   62,   63,   64,  124,  124,  124,   65,   66,
      124,  124,  124,  124,  124,   67,  124,  124,  124,  124,
       68,  124,  124,  124,   69,  124,  124,  124,   70,  124,
      124,   71,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  124,   30,  124,  124,
       31,  124,   32,  124,  124,   33,   34,  124,   35,   36,
       37,  124,   38,  124,   39,   40,  124,   41,   42,  124,
      124,   43,  124,  124,   44,  124,  124,  124,   45,  124,
       46,   47,   48,  124,   49,  124,  124,  124,   50,   51,
       52,   53,  124,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       14,   15,   16,   17,   18,  124,   19,  124,   20,   21,
       22,   23,  124,   24,  124,  124,   25,   26,  124,   27,
       28,  124,  124,  124,   29,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      124,   10,  124,   11,  124,   12,  124,  124,   13,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  124,    7,
      124,    8,    9,    2,    2,    2,    2,    2,    5,    6,
        2,    2,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[901] =
    {   0,
        0,    0,   65,    0,  400, 3573,  129,  131,    0, 3573,
      392,  390,  355,  127,  126,  348,  123,  123,  131,  177,
      112,  170,  121,  129,  183,  119,  135,  138,  136,  186,
      219,  182,    0,  194,  265,  308,  228,  230,  240,    0,
      161,  255,  347,    0,  344,  340,  337,  254,  254,  334,
      365,  423,  475,  527,  260,  575,  362,  293,  623,  299,
      231,  357,  415,  675,  723,  775,  343,  420,  825,  877,
      925,  425,  433,  271,  335,  325, 3573, 3573,  299,  291,
      281, 3573, 3573, 3573,    0,  140,  164,  281,  189,  229,
      283,    0,  303,  364,  341,  233,  252,  477,  414,  284,

      328,  378,  479,  388,  392,  420,  424,  424,  428,  452,
      467,    0,  430,  510,  450,  470,  467,  493,  520,  534,
      494,  520,  518,  520,  531,  543,  540,    0,  543,  528,
      531,  549,  573,  567,  561,  575,  577,  570,  569,  587,
      589,  580,  609,  581,  582,  578,  622,  599,  623,  623,
      633,  634,  620,    0,  296,  265,  249,    0,    0,  244,
      241,  294,    0,    0,    0,  647,  679,  666,  669,  721,
      729,  737,  663,  753,  783,  804,  687,  791,  977,  807,
      742,  829,  844, 1027,  858,  875,  879,  903,  911,  933,
      927,  967,  893,  975, 1076,  979,  965,  935,  989, 1033,

     1023, 1042, 1072, 1073, 1086, 1037, 1087, 1077, 1109, 1122,
     1111, 1127, 1139, 1137, 1151, 1143, 1173, 1181, 1175, 1191,
     1209, 1197, 1199, 1234, 1235, 1230, 1247, 1245, 1284, 1271,
     1266, 1288, 1258, 1297, 3573,  207,    0,  638,    0,  641,
      638,    0,    0,  672,  670,  694,  747,  758,  763,  785,
      772,    0,  799,  809,  836,  867,  855,  857,  904,  932,
      921,  987,  993, 1003,  993, 1022, 1032,    0, 1032, 1091,
     1153, 1136, 1152, 1176, 1168, 1174, 1203, 1237, 1260, 1289,
     1296, 1279, 1290,    0, 1288, 1307, 1305, 1315, 1323, 1318,
     1305, 1309,    0, 1320, 1316, 1318, 1337, 1338, 1346, 1331,

     1332, 1337, 1353, 1335, 1348, 1353, 1355,    0, 1339, 1343,
     1345, 1355,    0, 1352, 1351, 1368,    0, 1362, 1363, 1364,
     1383, 1372, 1367, 1368, 1376, 1379, 1391,    0,  201, 1396,
     1397, 1405, 1407, 1415, 1409, 1411, 1420, 1428, 1459, 1463,
     1460, 1450, 1478, 1482, 1464, 1494, 1508, 1499, 1512, 1518,
     1504, 1533, 1520, 1550, 1556, 1537, 1571, 1558, 1566, 1562,
     1574, 1587, 1604, 1615, 1590, 1616, 1625, 1640, 1644, 1648,
     1627, 1630, 1649, 1670, 1673, 1679, 1678, 1694, 1681, 1718,
     1684, 1723, 1727, 1724, 1732, 1733, 1735, 1763, 1758, 1737,
     1761, 1777, 1786, 1787, 1801, 1815, 1812, 1817, 1796, 1826,

     1829, 1840, 1830, 1851, 1861, 1855, 1863, 1869, 1879, 1880,
     1894, 1905, 1909, 1928, 1913, 1918, 1939, 1943, 1954, 1968,
     1386, 1399, 1394, 1432, 1536,    0, 1585, 1618, 1652, 1688,
     1698,    0, 1759, 1775, 1850, 1874,    0, 1906, 1916, 1916,
        0, 1924, 1926, 1937, 1954, 1976,    0,    0,    0, 1977,
     1965,    0, 1968,    0, 1968, 1966, 1963, 1970, 1974, 1989,
        0, 1982,    0,    0,    0, 1977,    0, 1986, 1997, 1993,
     1995,    0, 2013, 2012, 2000, 2004, 2013,    0,    0, 2026,
     2027, 2017, 2013, 2012, 2020, 2032,    0, 2031, 2028, 2033,
     2026,    0, 2023, 2043, 2033, 2027, 2049, 2031, 2045, 2051,

        0, 2040, 2061,    0, 2062, 2066, 2065, 2067, 2071, 2076,
     2081, 2097, 2116, 2095, 2111, 2099, 2120, 2133, 2130, 2139,
     2121, 2171, 2161, 2175, 2170, 2173, 2174, 2183, 2204, 2227,
     2187, 2205, 2213, 2239, 2237, 2216, 2229, 2241, 2267, 2258,
     2253, 2269, 2270, 2293, 2281, 2311, 2292, 2303, 2307, 2321,
     2315, 2337, 2326, 2329, 2347, 2332, 2377, 2361, 2365, 2369,
     2383, 2366, 2380, 2399, 2415, 2417, 2401, 2434, 2423, 2447,
     2433, 2436, 2451, 2439, 2465, 2457, 2473, 2490, 2496, 2479,
     2501, 2518, 2507, 2519, 2529, 2531, 2530, 2535,    0,    0,
     2130, 2179, 2215, 2229, 2315, 2503, 2525,    0, 2531, 2535,

     2544,    0, 2538, 2550, 2561, 2563, 2549, 2552, 2556, 2568,
     2566,    0, 2573, 2566, 2566,    0,    0, 2568, 2584, 2571,
     2580,    0,    0,    0,    0, 2593, 2589, 2578,    0,    0,
     2595, 2583, 2585, 2601, 2599,    0, 2608, 2590, 2608, 2613,
     2599, 2602, 2602, 2622,    0, 2621, 2625, 2626,    0, 2613,
     2633,    0, 2635, 2637, 2638, 2641, 2643, 2647, 2660, 2671,
     2652, 2675, 2683, 2697, 2689, 2692, 2706, 2705, 2715, 2723,
     2734, 2740, 2737, 2759, 2738, 2746, 2769, 2775, 2777, 2774,
     2780, 2803, 2805, 2814, 2813, 2809, 2811, 2817, 2826, 2839,
     2848, 2854, 2843, 2857, 2865, 2867, 2889, 2871, 2879, 2888,

     2897, 2913, 2922, 2923, 2911, 2934, 2951, 2945, 2937, 2953,
     2963, 2959, 2967, 2977, 2999, 2976, 2639,    0, 2640, 2650,
     2686, 2694,    0, 2731, 2768,    0,    0, 2851,    0,    0,
        0, 2900,    0, 2894,    0,    0, 2885,    0,    0, 2962,
     2982,    0, 2978, 2992,    0, 2986, 3005, 2987,    0, 3010,
     2997,    0,    0, 3006,    0, 3020, 3021, 3005,    0,    0,
        0,    0, 3014, 3025, 3029, 3030, 3031, 3041, 3053, 3042,
     3065, 3059, 3064, 3075, 3083, 3093, 3094, 3096, 3097, 3098,
     3119, 3107, 3109, 3115, 3131, 3132, 3137, 3133, 3147, 3161,
     3169, 3163, 3171, 3173, 3182, 3185, 3199, 3187, 3203, 3211,

     3215, 3217, 3225, 3240, 3239, 3241, 3251, 3253, 3255, 3269,
        0,    0,    0,    0,    0, 3031,    0, 3084,    0,    0,
        0,    0, 3150,    0, 3136, 3206,    0,    0, 3228,    0,
        0, 3234, 3248, 3257,    0, 3265, 3277, 3279, 3290, 3291,
     3305, 3293, 3294, 3295, 3307, 3319, 3323, 3331, 3333, 3335,
     3344, 3345, 3347, 3361, 3357, 3359, 3385, 3387, 3363, 3369,
     3358,    0, 3378,    0, 3384,    0, 3379, 3390,    0, 3415,
     3409, 3418, 3417, 3427, 3419, 3421, 3450, 3431, 3449,    0,
     3438,    0,    0, 3453, 3455, 3469, 3471, 3472,    0,    0,
     3481, 3484, 3573, 3548, 3552,  189, 3556, 3560, 3564, 3568

    } ;

static yyconst flex_int16_t yy_def[901] =
    {   0,
      893,    1,  893,    3,  893,  893,  893,  893,  894,  893,
      895,  893,  893,  893,  893,  893,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  897,
      897,  893,  898,  897,  899,  897,  897,  897,  897,  897,
      900,  900,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,  893,  894,  895,  893,  893,  893,  893,
      893,  893,  893,  893,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,

      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  897,  897,  898,  899,  897,  897,  897,
      897,  897,  897,  897,  897,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,  893,  893,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,

      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  897,  897,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,

      896,  896,  896,  896,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,

      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      896,  896,  896,  896,  896,  896,  896,  896,  896,   52,
       52,   52,   52,   52,   52,   52,   52,   52,  896,  896,
      896,  896,  896,   52,   52,   52,   52,   52,  896,  896,
       52,   52,    0,  893,  893,  893,  893,  893,  893,  893

    } ;

static yyconst flex_int16_t yy_nxt[3639] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   33,   33,   33,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   33,   33,   33,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   44,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,

       67,   67,   67,   40,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   67,   67,   67,
       74,   74,   74,   74,   80,   81,   82,   83,   86,   91,
       87,  110,  102,   93,  108,  116,   88,  103,   89,  111,
      109,  117,  121,   90,  118,  237,  122,   94,  119,   92,
       95,   96,  155,   74,  120,   86,   91,   87,  110,  102,
       93,  108,  116,   88,  103,   89,  111,  109,  117,  121,
       90,  118,  237,  122,   94,  119,   92,   95,   96,   97,
      104,  120,   85,   98,  131,  238,  105,   99,  123,  106,

      112,  241,  107,  100,  242,  132,  101,  113,  114,  329,
      134,  133,  124,  115,  135,  236,   97,  104,  125,  126,
       98,  131,  238,  105,   99,  123,  106,  112,  241,  107,
      100,  242,  132,  101,  113,  114,  127,  134,  133,  124,
      115,  135,  150,  243,  128,  125,  126,  198,  129,  329,
      151,  130,  160,  147,  158,  148,   74,   74,  149,  152,
      153,  161,  162,  127,  163,  164,  252,  166,  328,  150,
      243,  128,   74,   74,  198,  129,  166,  151,  130,  136,
      147,  137,  148,  253,  138,  149,  152,  153,   80,   81,
      183,  139,  140,  252,  166,  184,  166,  155,   74,  236,

      244,  161,  162,  166,  239,  191,  136,   79,  137,  166,
      253,  138,  240,  192,  245,  166,  260,  183,  139,  140,
      141,  142,  184,  166,  143,  197,  246,  244,  144,  166,
       77,  239,  191,  247,  145,  166,  166,  146,  235,  240,
      192,  245,  166,  260,  165,  160,  159,  141,  142,  158,
      154,  143,  197,  246,  261,  144,  166,  250,   84,  166,
      247,  145,  166,   79,  146,  154,  154,  251,  154,  154,
      154,  154,  154,  199,  154,  154,  154,  200,  166,  166,
      167,  261,  168,  201,  250,  189,  166,  248,  169,  249,
      170,  190,  262,  166,  251,  171,   78,   77,  166,  893,

      199,  893,  893,  893,  200,  166,  166,  167,  893,  168,
      201,  267,  189,  893,  248,  169,  249,  170,  190,  262,
      166,  268,  171,  154,  154,  166,  154,  154,  154,  154,
      154,  202,  154,  154,  154,  203,  215,  231,  267,  172,
      216,  166,  893,  258,  259,  232,  269,  270,  268,  166,
      271,  166,  233,  234,  272,  893,  166,  277,  202,  173,
      893,  166,  203,  215,  231,  893,  172,  216,  166,  166,
      258,  259,  232,  269,  270,  282,  166,  271,  166,  233,
      234,  272,  273,  166,  277,  274,  173,  174,  166,  254,
      283,  166,  275,  263,  255,  264,  166,  276,  893,  265,

      256,  175,  282,  284,  176,  177,  266,  257,  893,  273,
      285,  166,  274,  893,  174,  893,  254,  283,  166,  275,
      263,  255,  264,  290,  276,  278,  265,  256,  175,  893,
      284,  176,  177,  266,  257,  279,  893,  285,  166,  178,
      280,  281,  286,  179,  287,  291,  288,  180,  289,  292,
      290,  293,  278,  181,  294,  295,  182,  296,  297,  298,
      299,  300,  279,  166,  893,  893,  178,  280,  281,  286,
      179,  287,  291,  288,  180,  289,  292,  893,  293,  305,
      181,  294,  295,  182,  296,  297,  298,  299,  300,  301,
      166,  166,  303,  302,  306,  185,  309,  304,  310,  311,

      307,  186,  312,  313,  187,  316,  305,  188,  308,  317,
      318,  166,  893,  893,  321,  893,  301,  893,  166,  303,
      302,  306,  185,  309,  304,  310,  311,  307,  186,  312,
      313,  187,  316,  314,  188,  308,  317,  318,  166,  166,
      193,  321,  319,  322,  315,  320,  323,  194,  195,  324,
      326,  327,  893,  196,  421,  893,  893,  422,  893,  166,
      314,  423,  325,  166,  893,  893,  166,  193,  893,  319,
      322,  315,  320,  323,  194,  195,  324,  326,  327,  166,
      196,  421,  166,  166,  422,  166,  166,  204,  423,  325,
      166,  166,  332,  893,  330,  166,  893,  331,  424,  166,

      333,  205,  166,  166,  425,  166,  166,  206,  207,  166,
      166,  166,  166,  893,  204,  166,  893,  426,  166,  332,
      345,  330,  166,  166,  331,  424,  166,  333,  205,  166,
      166,  425,  166,  334,  206,  207,  335,  166,  166,  166,
      208,  893,  166,  336,  426,  166,  893,  345,  209,  893,
      166,  893,  210,  166,  337,  211,  893,  166,  166,  166,
      334,  427,  893,  335,  166,  166,  166,  208,  338,  166,
      336,  893,  166,  166,  353,  209,  339,  893,  166,  210,
      166,  337,  211,  340,  166,  166,  166,  212,  427,  166,
      428,  166,  166,  893,  429,  338,  166,  430,  213,  166,

      166,  353,  431,  339,  214,  166,  341,  166,  342,  893,
      340,  166,  893,  893,  212,  432,  166,  428,  166,  166,
      343,  429,  346,  166,  430,  213,  166,  166,  893,  431,
      344,  214,  433,  341,  166,  342,  351,  352,  166,  217,
      166,  218,  432,  166,  219,  166,  166,  343,  434,  346,
      166,  220,  221,  893,  166,  354,  893,  344,  355,  433,
      166,  166,  893,  351,  352,  166,  217,  166,  218,  437,
      166,  219,  166,  438,  166,  434,  893,  893,  220,  221,
      166,  360,  354,  435,  893,  355,  893,  166,  166,  222,
      223,  166,  166,  224,  166,  166,  437,  225,  436,  893,

      438,  166,  893,  226,  361,  362,  227,  166,  360,  166,
      435,  166,  893,  166,  893,  166,  222,  223,  166,  166,
      224,  166,  166,  893,  225,  436,  363,  166,  893,  166,
      226,  361,  362,  227,  893,  439,  166,  364,  166,  166,
      166,  166,  166,  166,  893,  440,  166,  166,  441,  166,
      228,  166,  229,  363,  166,  230,  166,  366,  893,  365,
      367,  166,  439,  166,  364,  893,  166,  893,  166,  166,
      166,  377,  440,  893,  166,  441,  166,  228,  166,  229,
      893,  166,  230,  166,  366,  376,  365,  367,  166,  347,
      166,  166,  368,  166,  348,  166,  166,  369,  377,  442,

      349,  166,  370,  166,  375,  166,  378,  350,  166,  443,
      166,  166,  376,  166,  893,  166,  347,  444,  166,  368,
      166,  348,  166,  445,  369,  166,  442,  349,  166,  370,
      166,  375,  166,  378,  350,  381,  443,  382,  166,  166,
      166,  356,  166,  357,  444,  446,  893,  358,  447,  166,
      445,  893,  166,  166,  359,  379,  448,  380,  166,  166,
      387,  893,  381,  166,  382,  893,  166,  893,  356,  166,
      357,  383,  446,  166,  358,  447,  166,  893,  166,  893,
      166,  359,  379,  448,  380,  166,  166,  387,  166,  166,
      166,  371,  166,  166,  389,  893,  166,  384,  383,  388,

      166,  372,  166,  166,  385,  166,  373,  374,  166,  166,
      893,  893,  166,  166,  449,  166,  166,  386,  371,  166,
      166,  389,  166,  166,  384,  166,  388,  166,  372,  166,
      166,  385,  893,  373,  374,  166,  166,  390,  166,  166,
      166,  449,  391,  166,  386,  166,  893,  166,  893,  166,
      166,  393,  166,  394,  166,  166,  392,  395,  166,  166,
      893,  398,  893,  166,  390,  166,  450,  166,  451,  391,
      166,  452,  166,  166,  166,  166,  396,  893,  393,  166,
      394,  397,  166,  392,  395,  166,  166,  166,  398,  166,
      166,  166,  399,  450,  166,  451,  453,  166,  452,  454,

      166,  402,  166,  396,  400,  455,  166,  166,  397,  166,
      405,  166,  401,  166,  166,  166,  166,  166,  166,  399,
      403,  404,  406,  453,  166,  166,  454,  166,  402,  456,
      893,  400,  455,  166,  166,  166,  166,  405,  166,  401,
      166,  893,  166,  893,  166,  166,  166,  403,  404,  406,
      166,  166,  166,  457,  166,  893,  456,  410,  407,  409,
      166,  166,  166,  166,  893,  412,  166,  893,  413,  408,
      166,  166,  166,  166,  419,  893,  458,  166,  166,  411,
      457,  166,  166,  166,  410,  407,  409,  166,  166,  416,
      166,  415,  412,  166,  166,  413,  408,  166,  166,  414,

      166,  419,  166,  458,  417,  459,  411,  166,  166,  166,
      166,  462,  460,  166,  166,  463,  416,  418,  415,  464,
      166,  166,  461,  465,  166,  466,  414,  166,  420,  166,
      467,  417,  459,  166,  166,  468,  469,  470,  462,  460,
      166,  471,  463,  472,  418,  473,  464,  166,  474,  461,
      465,  166,  466,  475,  476,  420,  479,  467,  477,  480,
      166,  481,  468,  469,  470,  482,  483,  484,  471,  485,
      472,  486,  473,  487,  488,  474,  489,  478,  490,  491,
      475,  476,  492,  479,  493,  477,  480,  494,  481,  495,
      497,  496,  482,  483,  484,  498,  485,  499,  486,  500,

      487,  488,  501,  489,  478,  490,  491,  502,  503,  492,
      504,  493,  166,  505,  494,  589,  495,  497,  496,  893,
      893,  166,  498,  506,  499,  166,  500,  166,  590,  501,
      591,  166,  166,  166,  502,  503,  166,  504,  507,  166,
      505,  166,  589,  166,  166,  166,  508,  166,  166,  893,
      506,  166,  166,  893,  166,  590,  166,  591,  166,  166,
      166,  592,  509,  166,  166,  507,  166,  893,  166,  893,
      166,  166,  166,  508,  166,  166,  166,  511,  166,  166,
      166,  513,  510,  166,  893,  893,  166,  893,  592,  509,
      514,  166,  512,  166,  166,  166,  166,  893,  166,  166,

      166,  893,  166,  166,  511,  893,  166,  166,  513,  510,
      516,  518,  515,  166,  166,  166,  893,  514,  166,  512,
      522,  166,  166,  166,  166,  166,  166,  166,  519,  893,
      166,  517,  521,  524,  166,  166,  166,  516,  518,  515,
      166,  166,  166,  520,  166,  166,  893,  522,  166,  166,
      893,  166,  593,  527,  166,  519,  166,  166,  517,  521,
      524,  166,  166,  166,  523,  893,  166,  166,  526,  166,
      520,  166,  166,  166,  166,  166,  166,  525,  531,  593,
      527,  166,  166,  166,  893,  528,  166,  166,  529,  530,
      166,  523,  166,  166,  166,  526,  166,  594,  166,  166,

      166,  166,  166,  166,  525,  531,  166,  166,  893,  166,
      166,  532,  528,  166,  166,  529,  530,  166,  893,  166,
      166,  166,  535,  166,  594,  166,  166,  533,  534,  166,
      166,  166,  166,  166,  166,  536,  893,  166,  532,  893,
      166,  166,  595,  541,  893,  537,  542,  166,  893,  535,
      166,  166,  166,  166,  533,  534,  166,  893,  166,  166,
      166,  166,  536,  166,  166,  543,  166,  166,  166,  595,
      541,  538,  537,  542,  540,  539,  166,  893,  166,  166,
      166,  596,  893,  166,  166,  166,  544,  166,  166,  166,
      166,  166,  543,  166,  166,  166,  545,  549,  538,  551,

      166,  540,  539,  166,  547,  546,  166,  166,  596,  166,
      166,  166,  166,  544,  166,  166,  166,  166,  893,  597,
      166,  166,  166,  545,  549,  548,  551,  166,  598,  893,
      166,  547,  546,  166,  166,  552,  166,  166,  550,  166,
      166,  166,  166,  166,  166,  553,  597,  166,  166,  166,
      893,  166,  548,  559,  166,  598,  554,  166,  556,  166,
      166,  166,  552,  166,  555,  550,  166,  166,  166,  166,
      166,  166,  553,  166,  166,  166,  166,  560,  166,  166,
      559,  166,  599,  554,  893,  556,  166,  166,  558,  561,
      166,  555,  557,  166,  166,  166,  166,  166,  166,  166,

      166,  166,  166,  166,  560,  893,  166,  600,  562,  599,
      893,  563,  569,  166,  564,  558,  561,  166,  893,  557,
      166,  166,  166,  166,  166,  565,  166,  566,  166,  166,
      166,  166,  166,  166,  600,  562,  568,  166,  563,  569,
      166,  564,  570,  567,  166,  166,  166,  893,  166,  166,
      166,  166,  565,  166,  566,  166,  166,  893,  166,  166,
      166,  572,  166,  568,  166,  166,  166,  166,  893,  570,
      567,  166,  166,  166,  571,  166,  166,  166,  166,  166,
      166,  601,  573,  166,  574,  166,  602,  166,  572,  166,
      575,  166,  166,  166,  166,  577,  166,  166,  166,  166,

      576,  571,  893,  166,  166,  166,  166,  893,  601,  573,
      166,  574,  166,  602,  166,  166,  166,  575,  166,  578,
      603,  166,  577,  166,  166,  166,  166,  576,  893,  166,
      166,  579,  166,  580,  166,  581,  604,  166,  583,  605,
      582,  166,  166,  166,  166,  166,  578,  603,  166,  166,
      584,  606,  166,  607,  166,  166,  166,  166,  579,  166,
      580,  166,  581,  604,  166,  583,  605,  582,  166,  608,
      166,  166,  166,  585,  586,  166,  166,  584,  606,  166,
      607,  166,  166,  587,  166,  609,  166,  588,  610,  611,
      166,  166,  612,  613,  614,  615,  608,  166,  616,  617,

      585,  586,  166,  618,  166,  621,  166,  619,  622,  623,
      587,  166,  609,  624,  588,  610,  611,  166,  620,  612,
      613,  614,  615,  625,  626,  616,  617,  627,  628,  629,
      618,  166,  621,  630,  619,  622,  623,  631,  632,  633,
      624,  634,  635,  636,  637,  620,  638,  639,  640,  641,
      625,  626,  642,  643,  627,  628,  629,  644,  645,  646,
      630,  647,  648,  649,  631,  632,  633,  650,  634,  635,
      636,  637,  651,  638,  639,  640,  641,  652,  166,  642,
      643,  166,  166,  166,  644,  645,  646,  657,  647,  648,
      649,  653,  166,  658,  650,  654,  656,  166,  166,  651,

      893,  655,  166,  166,  652,  166,  893,  166,  166,  166,
      166,  166,  166,  166,  657,  166,  893,  166,  653,  166,
      658,  659,  654,  656,  166,  166,  661,  166,  655,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  662,  166,  663,  166,  660,  166,  166,  659,  166,
      893,  666,  166,  661,  166,  166,  166,  166,  166,  166,
      166,  665,  166,  166,  166,  664,  166,  717,  662,  166,
      663,  893,  660,  166,  166,  166,  166,  166,  666,  166,
      893,  668,  166,  166,  166,  667,  166,  166,  665,  166,
      166,  166,  664,  166,  717,  718,  166,  166,  669,  166,

      670,  671,  166,  166,  166,  893,  166,  166,  668,  166,
      166,  166,  667,  166,  166,  672,  166,  166,  166,  166,
      166,  166,  718,  166,  166,  669,  166,  670,  671,  166,
      166,  719,  166,  166,  166,  673,  166,  166,  166,  674,
      166,  166,  672,  166,  720,  166,  166,  166,  166,  166,
      166,  675,  166,  166,  677,  166,  166,  166,  719,  166,
      893,  893,  673,  166,  676,  166,  674,  166,  166,  166,
      166,  720,  166,  166,  166,  166,  166,  166,  675,  166,
      166,  677,  166,  166,  166,  166,  166,  679,  680,  166,
      166,  676,  166,  678,  166,  893,  166,  166,  681,  682,

      166,  166,  166,  166,  166,  166,  166,  893,  166,  166,
      166,  683,  166,  166,  679,  680,  166,  166,  893,  166,
      678,  166,  684,  166,  166,  681,  682,  166,  166,  166,
      166,  166,  166,  166,  685,  166,  166,  166,  683,  166,
      721,  893,  688,  166,  166,  166,  166,  166,  166,  684,
      166,  166,  686,  166,  166,  166,  166,  166,  166,  689,
      687,  685,  166,  166,  166,  166,  166,  721,  166,  688,
      166,  893,  166,  166,  166,  166,  690,  692,  166,  686,
      166,  166,  166,  166,  166,  166,  689,  687,  893,  166,
      166,  691,  166,  166,  693,  166,  166,  166,  694,  166,

      166,  166,  166,  690,  692,  166,  893,  695,  166,  166,
      166,  696,  166,  166,  893,  166,  166,  166,  691,  166,
      166,  693,  893,  166,  166,  694,  166,  697,  166,  166,
      699,  166,  166,  166,  695,  166,  893,  166,  696,  166,
      166,  698,  166,  166,  166,  893,  166,  701,  893,  166,
      166,  166,  703,  166,  697,  705,  893,  699,  166,  166,
      166,  702,  166,  166,  166,  700,  166,  166,  698,  166,
      166,  704,  166,  166,  701,  166,  166,  166,  166,  703,
      166,  166,  705,  166,  893,  893,  166,  166,  702,  166,
      166,  706,  700,  166,  166,  166,  166,  166,  704,  166,

      166,  166,  166,  707,  708,  893,  166,  893,  166,  166,
      166,  710,  166,  711,  166,  166,  166,  166,  706,  893,
      166,  709,  166,  166,  893,  713,  166,  893,  166,  722,
      707,  708,  166,  166,  166,  714,  166,  166,  710,  166,
      711,  723,  166,  166,  166,  166,  716,  166,  709,  712,
      166,  166,  713,  166,  166,  166,  722,  724,  725,  166,
      726,  166,  714,  715,  166,  166,  166,  166,  723,  727,
      166,  166,  166,  716,  166,  728,  712,  729,  166,  730,
      731,  166,  166,  732,  724,  725,  733,  726,  734,  735,
      715,  736,  166,  166,  166,  737,  727,  738,  166,  739,

      740,  741,  728,  742,  729,  743,  730,  731,  744,  745,
      732,  746,  747,  733,  748,  734,  735,  749,  736,  750,
      751,  752,  737,  753,  738,  754,  739,  740,  741,  755,
      742,  756,  743,  757,  758,  744,  745,  759,  746,  747,
      760,  748,  761,  762,  749,  763,  750,  751,  752,  893,
      753,  166,  754,  166,  166,  811,  755,  765,  756,  766,
      757,  758,  767,  166,  759,  812,  813,  760,  770,  761,
      762,  166,  763,  166,  166,  764,  166,  166,  166,  166,
      166,  166,  811,  166,  765,  768,  766,  166,  166,  767,
      166,  166,  812,  813,  893,  770,  166,  769,  166,  166,

      166,  166,  764,  166,  166,  773,  166,  166,  166,  771,
      166,  166,  768,  166,  166,  166,  814,  815,  166,  166,
      772,  166,  166,  166,  769,  166,  166,  893,  166,  893,
      775,  776,  773,  166,  166,  166,  771,  774,  166,  777,
      166,  166,  166,  814,  815,  816,  166,  772,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  775,  776,  166,
      166,  782,  166,  893,  774,  778,  777,  780,  166,  166,
      166,  779,  816,  166,  166,  166,  166,  166,  166,  781,
      166,  166,  166,  166,  893,  166,  166,  783,  782,  166,
      166,  166,  778,  166,  780,  166,  166,  166,  779,  817,

      166,  166,  166,  166,  784,  166,  781,  893,  785,  166,
      166,  166,  166,  166,  783,  893,  166,  166,  166,  166,
      166,  787,  166,  166,  893,  166,  817,  166,  893,  166,
      166,  784,  166,  166,  786,  785,  789,  166,  166,  166,
      166,  166,  166,  166,  788,  166,  166,  166,  787,  166,
      166,  790,  166,  166,  166,  166,  166,  166,  893,  166,
      166,  786,  166,  789,  166,  818,  166,  791,  166,  166,
      166,  788,  166,  166,  166,  166,  166,  166,  790,  166,
      166,  793,  166,  166,  166,  792,  166,  796,  893,  166,
      166,  166,  818,  166,  791,  166,  794,  166,  893,  797,

      166,  166,  166,  166,  166,  166,  166,  166,  793,  798,
      166,  166,  792,  166,  796,  166,  819,  166,  795,  820,
      166,  821,  166,  794,  166,  166,  797,  166,  166,  166,
      166,  166,  166,  166,  166,  801,  798,  800,  166,  166,
      166,  802,  166,  819,  799,  795,  820,  166,  821,  166,
      166,  166,  166,  166,  166,  893,  166,  805,  166,  166,
      166,  166,  801,  803,  800,  166,  166,  166,  802,  806,
      166,  799,  893,  166,  166,  808,  166,  166,  807,  166,
      166,  166,  804,  166,  805,  166,  166,  166,  166,  166,
      803,  822,  166,  166,  166,  166,  806,  166,  823,  166,

      166,  824,  808,  166,  825,  807,  166,  809,  166,  804,
      166,  810,  166,  166,  166,  166,  166,  826,  822,  166,
      166,  827,  166,  828,  829,  823,  166,  830,  824,  831,
      166,  825,  832,  833,  809,  166,  834,  835,  810,  166,
      166,  836,  166,  861,  826,  166,  166,  838,  827,  893,
      828,  829,  893,  893,  830,  837,  831,  166,  166,  832,
      833,  166,  166,  834,  835,  166,  166,  166,  836,  166,
      861,  839,  166,  166,  838,  166,  840,  166,  166,  841,
      166,  166,  837,  893,  166,  166,  893,  893,  166,  166,
      842,  166,  166,  166,  166,  166,  166,  843,  839,  166,

      166,  166,  166,  840,  166,  166,  841,  166,  166,  166,
      166,  166,  166,  844,  166,  862,  166,  842,  166,  166,
      893,  893,  166,  166,  843,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      844,  166,  862,  166,  845,  166,  166,  166,  166,  848,
      166,  846,  166,  166,  893,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  863,  864,  847,  166,  166,  166,
      166,  845,  166,  166,  166,  166,  848,  166,  846,  166,
      166,  850,  166,  166,  849,  166,  893,  166,  893,  852,
      166,  863,  864,  847,  166,  166,  166,  166,  166,  166,

      166,  166,  851,  166,  166,  166,  166,  166,  850,  166,
      166,  849,  166,  854,  166,  166,  852,  855,  853,  166,
      893,  166,  865,  166,  166,  166,  166,  166,  166,  851,
      166,  166,  166,  166,  166,  166,  166,  857,  856,  166,
      854,  166,  166,  893,  855,  853,  166,  166,  166,  865,
      166,  166,  858,  166,  166,  166,  166,  166,  166,  866,
      166,  166,  166,  867,  857,  856,  166,  166,  166,  166,
      859,  166,  868,  869,  166,  166,  166,  166,  166,  858,
      166,  166,  166,  166,  166,  166,  866,  166,  166,  166,
      867,  166,  860,  166,  166,  166,  166,  859,  166,  868,

      869,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  870,  166,  860,
      166,  166,  166,  166,  893,  871,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  870,  872,  893,  166,  166,  166,
      166,  166,  871,  166,  166,  166,  166,  166,  166,  166,
      874,  166,  166,  166,  873,  893,  166,  166,  166,  166,
      166,  166,  872,  166,  166,  166,  166,  166,  166,  878,
      166,  166,  166,  166,  893,  166,  166,  874,  166,  879,
      166,  873,  875,  166,  166,  166,  166,  166,  166,  166,

      166,  166,  166,  166,  166,  166,  878,  166,  166,  880,
      166,  877,  166,  881,  876,  882,  879,  883,  893,  875,
      166,  166,  166,  166,  166,  166,  166,  893,  166,  893,
      166,  166,  166,  166,  166,  166,  880,  166,  877,  893,
      881,  876,  882,  166,  883,  166,  884,  166,  166,  885,
      166,  166,  166,  166,  166,  166,  886,  887,  166,  893,
      166,  166,  166,  166,  166,  889,  166,  166,  890,  891,
      166,  166,  166,  884,  166,  893,  885,  888,  166,  893,
      166,  166,  166,  886,  887,  166,  166,  166,  166,  166,
      166,  166,  889,  166,  166,  890,  891,  166,  166,  892,

      166,  893,  893,  893,  888,  166,  893,  166,  166,  893,
      893,  893,  166,  166,  166,  166,  166,  166,  166,  893,
      166,  893,  893,  893,  166,  893,  892,  166,  893,  893,
      893,  893,  166,  893,  166,  166,  893,  893,  893,  893,
      893,  893,  893,  893,  166,  893,  893,  166,   75,  893,
      893,   75,   76,  893,   76,   76,  154,  893,  154,  154,
      156,  893,  156,  156,  157,  893,  157,  157,  166,  893,
      166,  166,    5,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,

      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893
    } ;

static yyconst flex_int16_t yy_chk[3639] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   14,   14,   15,   15,   17,   18,
       17,   24,   21,   19,   23,   26,   17,   21,   17,   24,
       23,   27,   29,   17,   28,   86,   29,   19,   28,   18,
       19,   19,   41,   41,   28,   17,   18,   17,   24,   21,
       19,   23,   26,   17,   21,   17,   24,   23,   27,   29,
       17,   28,   86,   29,   19,   28,   18,   19,   19,   20,
       22,   28,  896,   20,   32,   87,   22,   20,   30,   22,

       25,   89,   22,   20,   89,   32,   20,   25,   25,  329,
       34,   32,   30,   25,   34,  236,   20,   22,   30,   30,
       20,   32,   87,   22,   20,   30,   22,   25,   89,   22,
       20,   89,   32,   20,   25,   25,   31,   34,   32,   30,
       25,   34,   38,   90,   31,   30,   30,   61,   31,  161,
       38,   31,  160,   37,  157,   37,   42,   42,   37,   39,
       39,   48,   48,   31,   49,   49,   96,   61,  156,   38,
       90,   31,   74,   74,   61,   31,   55,   38,   31,   35,
       37,   35,   37,   97,   35,   37,   39,   39,   81,   81,
       55,   35,   35,   96,   61,   55,   55,  155,  155,   80,

       91,  162,  162,   55,   88,   58,   35,   79,   35,   58,
       97,   35,   88,   58,   91,   60,  100,   55,   35,   35,
       36,   36,   55,   55,   36,   60,   93,   91,   36,   58,
       76,   88,   58,   93,   36,   60,   58,   36,   75,   88,
       58,   91,   60,  100,   50,   47,   46,   36,   36,   45,
       43,   36,   60,   93,  101,   36,   58,   95,   16,   67,
       93,   36,   60,   13,   36,   51,   51,   95,   51,   51,
       51,   51,   51,   62,   51,   51,   51,   62,   57,   67,
       51,  101,   51,   62,   95,   57,   67,   94,   51,   94,
       51,   57,  102,   62,   95,   51,   12,   11,   57,    5,

       62,    0,    0,    0,   62,   57,   67,   51,    0,   51,
       62,  104,   57,    0,   94,   51,   94,   51,   57,  102,
       62,  105,   51,   52,   52,   57,   52,   52,   52,   52,
       52,   63,   52,   52,   52,   63,   68,   72,  104,   52,
       68,   72,    0,   99,   99,   72,  106,  107,  105,   73,
      108,   63,   73,   73,  109,    0,   68,  113,   63,   52,
        0,   72,   63,   68,   72,    0,   52,   68,   72,   73,
       99,   99,   72,  106,  107,  115,   73,  108,   63,   73,
       73,  109,  110,   68,  113,  110,   52,   53,   72,   98,
      116,   53,  111,  103,   98,  103,   73,  111,    0,  103,

       98,   53,  115,  117,   53,   53,  103,   98,    0,  110,
      118,   53,  110,    0,   53,    0,   98,  116,   53,  111,
      103,   98,  103,  121,  111,  114,  103,   98,   53,    0,
      117,   53,   53,  103,   98,  114,    0,  118,   53,   54,
      114,  114,  119,   54,  119,  122,  120,   54,  120,  123,
      121,  124,  114,   54,  125,  126,   54,  127,  129,  130,
      131,  132,  114,   54,    0,    0,   54,  114,  114,  119,
       54,  119,  122,  120,   54,  120,  123,    0,  124,  135,
       54,  125,  126,   54,  127,  129,  130,  131,  132,  133,
       54,   56,  134,  133,  136,   56,  138,  134,  139,  140,

      137,   56,  141,  142,   56,  144,  135,   56,  137,  145,
      146,   56,    0,    0,  148,    0,  133,    0,   56,  134,
      133,  136,   56,  138,  134,  139,  140,  137,   56,  141,
      142,   56,  144,  143,   56,  137,  145,  146,   56,   59,
       59,  148,  147,  149,  143,  147,  150,   59,   59,  151,
      152,  153,    0,   59,  238,    0,    0,  240,    0,   59,
      143,  241,  151,  166,    0,    0,   59,   59,    0,  147,
      149,  143,  147,  150,   59,   59,  151,  152,  153,  173,
       59,  238,  168,  166,  240,  169,   59,   64,  241,  151,
      166,   64,  169,    0,  167,  167,    0,  168,  244,  173,

      169,   64,  168,  177,  245,  169,  173,   64,   64,  168,
      166,   64,  169,    0,   64,  167,    0,  246,   64,  169,
      177,  167,  167,  177,  168,  244,  173,  169,   64,  168,
      177,  245,  169,  170,   64,   64,  170,  170,   64,   65,
       65,    0,  167,  171,  246,  171,    0,  177,   65,    0,
      177,    0,   65,  172,  172,   65,    0,  170,  181,   65,
      170,  247,    0,  170,  170,  171,   65,   65,  172,  174,
      171,    0,  171,  172,  181,   65,  174,    0,  181,   65,
      172,  172,   65,  174,  170,  181,   65,   66,  247,  174,
      248,   66,  171,    0,  249,  172,  174,  250,   66,  175,

      172,  181,  251,  174,   66,  181,  175,  178,  175,    0,
      174,   66,    0,    0,   66,  253,  174,  248,   66,  175,
      176,  249,  178,  180,  250,   66,  175,  178,    0,  251,
      176,   66,  254,  175,  178,  175,  180,  180,   66,   69,
      176,   69,  253,  180,   69,  182,  175,  176,  255,  178,
      180,   69,   69,    0,  178,  182,    0,  176,  183,  254,
      183,   69,    0,  180,  180,  182,   69,  176,   69,  257,
      180,   69,  182,  258,  185,  255,    0,    0,   69,   69,
      183,  185,  182,  256,    0,  183,    0,  183,   69,   70,
       70,  186,  182,   70,  185,  187,  257,   70,  256,    0,

      258,  185,    0,   70,  186,  187,   70,  183,  185,  193,
      256,  186,    0,   70,    0,  187,   70,   70,  186,  188,
       70,  185,  187,    0,   70,  256,  188,  189,    0,  193,
       70,  186,  187,   70,    0,  259,  193,  189,  186,  188,
       70,   71,  187,  191,    0,  260,  188,  189,  261,  190,
       71,  198,   71,  188,  189,   71,  193,  191,    0,  190,
      191,   71,  259,  191,  189,    0,  188,    0,   71,  190,
      191,  198,  260,    0,  189,  261,  190,   71,  198,   71,
        0,  197,   71,  192,  191,  197,  190,  191,   71,  179,
      191,  194,  192,  179,  179,  196,  190,  192,  198,  262,

      179,  197,  194,  192,  196,  199,  199,  179,  197,  263,
      192,  194,  197,  179,    0,  196,  179,  264,  194,  192,
      179,  179,  196,  265,  192,  199,  262,  179,  197,  194,
      192,  196,  199,  199,  179,  201,  263,  201,  194,  201,
      179,  184,  196,  184,  264,  266,    0,  184,  267,  200,
      265,    0,  199,  206,  184,  200,  269,  200,  202,  201,
      206,    0,  201,  184,  201,    0,  201,    0,  184,  200,
      184,  202,  266,  206,  184,  267,  200,    0,  202,    0,
      206,  184,  200,  269,  200,  202,  201,  206,  203,  204,
      184,  195,  195,  208,  208,    0,  200,  203,  202,  207,

      206,  195,  205,  207,  204,  202,  195,  195,  203,  204,
        0,    0,  195,  208,  270,  203,  204,  205,  195,  195,
      208,  208,  205,  207,  203,  209,  207,  211,  195,  205,
      207,  204,    0,  195,  195,  203,  204,  210,  210,  195,
      208,  270,  211,  212,  205,  209,    0,  211,    0,  205,
      207,  213,  209,  214,  211,  213,  212,  214,  210,  216,
        0,  216,    0,  212,  210,  210,  271,  215,  272,  211,
      212,  273,  209,  214,  211,  213,  215,    0,  213,  216,
      214,  215,  213,  212,  214,  210,  216,  215,  216,  217,
      212,  219,  217,  271,  215,  272,  274,  218,  273,  275,

      214,  219,  213,  215,  218,  276,  216,  220,  215,  217,
      222,  219,  218,  222,  215,  223,  217,  218,  219,  217,
      220,  221,  223,  274,  218,  221,  275,  220,  219,  277,
        0,  218,  276,  222,  220,  223,  217,  222,  219,  218,
      222,    0,  223,    0,  218,  221,  226,  220,  221,  223,
      224,  225,  221,  278,  220,    0,  277,  226,  224,  225,
      222,  228,  223,  227,    0,  228,  226,    0,  228,  224,
      224,  225,  221,  226,  233,    0,  279,  224,  225,  227,
      278,  228,  231,  227,  226,  224,  225,  230,  228,  231,
      227,  230,  228,  226,  233,  228,  224,  224,  225,  229,

      229,  233,  231,  279,  232,  280,  227,  230,  228,  231,
      227,  282,  281,  234,  230,  283,  231,  232,  230,  285,
      229,  233,  281,  286,  232,  287,  229,  229,  234,  231,
      288,  232,  280,  234,  230,  289,  290,  291,  282,  281,
      234,  292,  283,  294,  232,  295,  285,  229,  296,  281,
      286,  232,  287,  297,  298,  234,  300,  288,  299,  301,
      234,  302,  289,  290,  291,  303,  304,  305,  292,  306,
      294,  307,  295,  309,  310,  296,  311,  299,  312,  314,
      297,  298,  315,  300,  316,  299,  301,  318,  302,  319,
      320,  319,  303,  304,  305,  321,  306,  322,  307,  323,

      309,  310,  324,  311,  299,  312,  314,  325,  326,  315,
      327,  316,  330,  331,  318,  421,  319,  320,  319,    0,
        0,  332,  321,  333,  322,  335,  323,  336,  422,  324,
      423,  334,  330,  331,  325,  326,  337,  327,  334,  330,
      331,  332,  421,  333,  338,  335,  337,  336,  332,    0,
      333,  334,  335,    0,  336,  422,  337,  423,  334,  330,
      331,  424,  338,  337,  338,  334,  342,    0,  332,    0,
      333,  338,  335,  337,  336,  339,  341,  340,  334,  340,
      345,  342,  339,  337,    0,    0,  342,    0,  424,  338,
      343,  338,  341,  342,  343,  339,  341,    0,  344,  340,

      345,    0,  339,  341,  340,    0,  340,  345,  342,  339,
      346,  348,  344,  342,  343,  348,    0,  343,  344,  341,
      351,  343,  339,  341,  347,  344,  340,  345,  349,    0,
      346,  347,  350,  353,  350,  348,  353,  346,  348,  344,
      351,  343,  348,  349,  347,  344,    0,  351,  349,  352,
        0,  347,  425,  356,  350,  349,  353,  346,  347,  350,
      353,  350,  348,  353,  352,    0,  354,  351,  355,  352,
      349,  347,  355,  356,  358,  349,  352,  354,  360,  425,
      356,  350,  359,  353,    0,  357,  354,  357,  358,  359,
      361,  352,  355,  354,  358,  355,  352,  427,  360,  355,

      356,  358,  359,  362,  354,  360,  365,  357,    0,  359,
      361,  362,  357,  354,  357,  358,  359,  361,    0,  355,
      363,  358,  365,  362,  427,  360,  365,  363,  364,  359,
      362,  364,  366,  365,  357,  366,    0,  361,  362,    0,
      363,  367,  428,  371,    0,  367,  372,  363,    0,  365,
      362,  364,  366,  365,  363,  364,  368,    0,  364,  366,
      369,  367,  366,  371,  370,  373,  372,  363,  367,  428,
      371,  368,  367,  372,  370,  369,  368,    0,  364,  366,
      369,  429,    0,  368,  370,  373,  374,  369,  367,  375,
      371,  370,  373,  372,  377,  376,  374,  379,  368,  381,

      381,  370,  369,  368,  376,  375,  374,  369,  429,  375,
      378,  370,  373,  374,  377,  376,  375,  379,    0,  430,
      381,  377,  376,  374,  379,  378,  381,  381,  431,    0,
      378,  376,  375,  374,  380,  382,  375,  378,  380,  382,
      384,  377,  376,  383,  379,  383,  430,  381,  385,  386,
        0,  387,  378,  390,  380,  431,  384,  378,  387,  382,
      384,  380,  382,  383,  385,  380,  382,  384,  385,  386,
      383,  387,  383,  390,  389,  385,  386,  391,  387,  388,
      390,  380,  433,  384,    0,  387,  382,  384,  389,  392,
      383,  385,  388,  392,  389,  385,  386,  391,  387,  388,

      390,  389,  393,  394,  391,    0,  388,  434,  392,  433,
        0,  393,  399,  392,  394,  389,  392,  395,    0,  388,
      392,  389,  393,  394,  391,  395,  388,  396,  397,  393,
      394,  396,  399,  398,  434,  392,  398,  395,  393,  399,
      392,  394,  400,  397,  395,  401,  403,    0,  397,  393,
      394,  396,  395,  398,  396,  397,  402,    0,  396,  399,
      398,  403,  400,  398,  395,  401,  403,  404,    0,  400,
      397,  406,  401,  403,  402,  397,  402,  405,  396,  407,
      398,  435,  404,  402,  405,  408,  436,  404,  403,  400,
      407,  406,  401,  403,  404,  409,  410,  405,  406,  407,

      408,  402,    0,  402,  405,  408,  407,    0,  435,  404,
      411,  405,  408,  436,  404,  409,  410,  407,  406,  411,
      438,  412,  409,  410,  405,  413,  407,  408,    0,  415,
      411,  412,  408,  412,  416,  413,  439,  411,  415,  440,
      414,  412,  409,  410,  414,  413,  411,  438,  412,  415,
      416,  442,  413,  443,  416,  417,  415,  411,  412,  418,
      412,  416,  413,  439,  414,  415,  440,  414,  412,  444,
      419,  414,  413,  417,  418,  417,  415,  416,  442,  418,
      443,  416,  417,  419,  420,  445,  418,  420,  446,  450,
      419,  414,  451,  453,  455,  456,  444,  419,  457,  458,

      417,  418,  417,  459,  420,  462,  418,  460,  466,  468,
      419,  420,  445,  469,  420,  446,  450,  419,  460,  451,
      453,  455,  456,  470,  471,  457,  458,  473,  474,  475,
      459,  420,  462,  476,  460,  466,  468,  477,  480,  481,
      469,  482,  483,  484,  485,  460,  486,  488,  489,  490,
      470,  471,  491,  493,  473,  474,  475,  494,  495,  496,
      476,  497,  498,  499,  477,  480,  481,  500,  482,  483,
      484,  485,  502,  486,  488,  489,  490,  503,  505,  491,
      493,  507,  506,  508,  494,  495,  496,  509,  497,  498,
      499,  505,  510,  511,  500,  506,  508,  511,  505,  502,

        0,  507,  506,  508,  503,  505,    0,  509,  507,  506,
      508,  514,  510,  512,  509,  516,    0,  511,  505,  510,
      511,  512,  506,  508,  511,  505,  514,  515,  507,  506,
      508,  514,  513,  512,  509,  516,  517,  521,  514,  510,
      512,  515,  516,  517,  511,  513,  519,  515,  512,  518,
        0,  520,  513,  514,  515,  520,  517,  521,  514,  513,
      512,  519,  516,  517,  521,  518,  519,  591,  515,  518,
      517,    0,  513,  519,  515,  520,  518,  523,  520,  513,
        0,  523,  520,  517,  521,  522,  525,  522,  519,  526,
      527,  524,  518,  519,  591,  592,  518,  523,  524,  528,

      526,  527,  520,  531,  523,    0,  525,  522,  523,  526,
      527,  524,  522,  525,  522,  528,  526,  527,  524,  528,
      529,  532,  592,  531,  523,  524,  528,  526,  527,  533,
      531,  593,  536,  525,  522,  529,  526,  527,  524,  530,
      529,  532,  528,  530,  594,  537,  528,  529,  532,  533,
      531,  534,  536,  535,  537,  534,  533,  538,  593,  536,
        0,    0,  529,  530,  535,  537,  530,  529,  532,  541,
      530,  594,  537,  535,  540,  534,  533,  538,  534,  536,
      535,  537,  534,  539,  538,  542,  543,  540,  541,  541,
      530,  535,  537,  539,  540,    0,  541,  545,  542,  543,

      535,  540,  534,  539,  538,  542,  543,    0,  547,  544,
      539,  544,  542,  543,  540,  541,  541,  545,    0,  548,
      539,  540,  544,  549,  545,  542,  543,  546,  547,  544,
      539,  551,  542,  543,  546,  547,  544,  550,  544,  548,
      595,    0,  553,  549,  545,  554,  548,  546,  556,  544,
      549,  551,  550,  552,  546,  547,  544,  550,  551,  554,
      552,  546,  553,  555,  550,  554,  548,  595,  556,  553,
      549,    0,  554,  552,  546,  556,  555,  558,  551,  550,
      552,  559,  562,  555,  550,  560,  554,  552,    0,  553,
      555,  557,  554,  557,  559,  556,  563,  558,  560,  561,

      552,  559,  562,  555,  558,  560,    0,  561,  559,  562,
      555,  564,  560,  557,    0,  564,  563,  567,  557,  561,
      557,  559,    0,  563,  558,  560,  561,  565,  559,  562,
      567,  565,  560,  566,  561,  564,    0,  567,  564,  569,
      557,  566,  564,  563,  567,    0,  561,  569,    0,  571,
      568,  565,  572,  566,  565,  574,    0,  567,  565,  569,
      566,  570,  564,  570,  567,  568,  569,  573,  566,  571,
      568,  573,  572,  576,  569,  574,  571,  568,  565,  572,
      566,  575,  574,  570,    0,    0,  569,  573,  570,  577,
      570,  575,  568,  576,  573,  580,  571,  568,  573,  572,

      576,  575,  574,  577,  578,    0,  578,    0,  575,  577,
      570,  580,  579,  581,  573,  580,  577,  581,  575,    0,
      576,  579,  580,  583,    0,  583,  578,    0,  575,  596,
      577,  578,  579,  578,  582,  584,  577,  581,  580,  579,
      581,  597,  580,  583,  581,  585,  587,  586,  579,  582,
      583,  588,  583,  578,  582,  584,  596,  599,  600,  579,
      601,  582,  584,  586,  581,  585,  587,  586,  597,  603,
      583,  588,  585,  587,  586,  604,  582,  605,  588,  606,
      607,  582,  584,  608,  599,  600,  609,  601,  610,  611,
      586,  613,  585,  587,  586,  614,  603,  615,  588,  618,

      619,  620,  604,  621,  605,  626,  606,  607,  627,  628,
      608,  631,  632,  609,  633,  610,  611,  634,  613,  635,
      637,  638,  614,  639,  615,  640,  618,  619,  620,  641,
      621,  642,  626,  643,  644,  627,  628,  646,  631,  632,
      647,  633,  648,  650,  634,  651,  635,  637,  638,    0,
      639,  653,  640,  654,  655,  717,  641,  656,  642,  657,
      643,  644,  658,  658,  646,  719,  720,  647,  661,  648,
      650,  653,  651,  654,  655,  655,  659,  656,  653,  657,
      654,  655,  717,  658,  656,  659,  657,  660,  661,  658,
      658,  662,  719,  720,    0,  661,  659,  660,  653,  663,

      654,  655,  655,  659,  656,  665,  657,  660,  666,  663,
      658,  662,  659,  664,  660,  661,  721,  722,  662,  663,
      664,  668,  667,  659,  660,  665,  663,    0,  666,    0,
      668,  669,  665,  664,  660,  666,  663,  667,  662,  670,
      664,  668,  667,  721,  722,  724,  663,  664,  668,  667,
      671,  669,  665,  673,  675,  666,  672,  668,  669,  670,
      664,  675,  676,    0,  667,  671,  670,  673,  668,  667,
      671,  672,  724,  673,  675,  674,  672,  671,  669,  674,
      673,  675,  676,  672,    0,  677,  670,  677,  675,  676,
      680,  678,  671,  679,  673,  674,  681,  671,  672,  725,

      673,  675,  674,  672,  678,  677,  674,    0,  679,  676,
      680,  678,  677,  679,  677,    0,  681,  680,  678,  682,
      679,  683,  674,  681,    0,  686,  725,  687,    0,  685,
      684,  678,  677,  688,  682,  679,  685,  680,  678,  682,
      679,  683,  689,  681,  684,  686,  682,  687,  683,  685,
      684,  690,  686,  688,  687,  690,  685,  684,    0,  693,
      688,  682,  689,  685,  691,  728,  682,  691,  683,  689,
      692,  684,  686,  694,  687,  690,  685,  684,  690,  693,
      688,  695,  690,  696,  691,  692,  693,  698,    0,  689,
      692,  691,  728,  694,  691,  699,  696,  692,    0,  699,

      694,  695,  690,  696,  700,  697,  693,  698,  695,  701,
      696,  691,  692,  701,  698,  699,  732,  692,  697,  734,
      694,  737,  699,  696,  700,  697,  699,  705,  695,  702,
      696,  700,  697,  701,  698,  704,  701,  703,  703,  704,
      701,  705,  699,  732,  702,  697,  734,  705,  737,  702,
      706,  700,  697,  709,  705,    0,  702,  708,  703,  704,
      701,  708,  704,  706,  703,  703,  704,  707,  705,  710,
      706,  702,    0,  709,  705,  712,  702,  706,  711,  711,
      709,  708,  707,  713,  708,  703,  704,  707,  708,  710,
      706,  740,  716,  714,  707,  712,  710,  706,  741,  711,

      709,  743,  712,  713,  744,  711,  711,  714,  708,  707,
      713,  715,  716,  714,  707,  715,  710,  746,  740,  716,
      714,  747,  712,  748,  750,  741,  711,  751,  743,  754,
      713,  744,  756,  757,  714,  715,  758,  763,  715,  716,
      714,  764,  715,  816,  746,  765,  766,  767,  747,    0,
      748,  750,    0,    0,  751,  766,  754,  768,  770,  756,
      757,  764,  715,  758,  763,  765,  766,  767,  764,  769,
      816,  768,  765,  766,  767,  772,  769,  768,  770,  771,
      773,  771,  766,    0,  768,  770,    0,    0,  764,  769,
      772,  774,  765,  766,  767,  772,  769,  775,  768,  775,

      773,  771,  772,  769,  768,  770,  771,  773,  771,  776,
      777,  774,  778,  779,  780,  818,  769,  772,  774,  775,
        0,    0,  772,  782,  775,  783,  775,  773,  771,  776,
      777,  784,  778,  779,  780,  781,  776,  777,  774,  778,
      779,  780,  818,  782,  781,  783,  775,  785,  786,  788,
      782,  784,  783,  787,    0,  781,  776,  777,  784,  778,
      779,  780,  781,  789,  823,  825,  787,  785,  786,  788,
      782,  781,  783,  787,  785,  786,  788,  790,  784,  792,
      787,  791,  781,  789,  790,  791,    0,  793,    0,  794,
      789,  823,  825,  787,  785,  786,  788,  790,  795,  792,

      787,  796,  793,  798,  790,  791,  792,  793,  791,  794,
      789,  790,  791,  797,  793,  797,  794,  798,  795,  799,
        0,  796,  826,  798,  790,  795,  792,  800,  796,  793,
      798,  801,  791,  802,  793,  797,  794,  803,  801,  799,
      797,  803,  797,    0,  798,  795,  799,  800,  796,  826,
      798,  801,  804,  802,  800,  805,  804,  806,  801,  829,
      802,  803,  797,  832,  803,  801,  799,  807,  803,  808,
      805,  809,  833,  834,  800,  805,  804,  806,  801,  804,
      802,  836,  805,  804,  806,  810,  829,  807,  803,  808,
      832,  809,  810,  837,  807,  838,  808,  805,  809,  833,

      834,  836,  805,  804,  806,  810,  839,  840,  836,  842,
      843,  844,  810,  837,  807,  838,  808,  841,  809,  810,
      837,  841,  838,  845,    0,  843,  839,  840,  836,  842,
      843,  844,  810,  839,  840,  846,  842,  843,  844,  847,
      837,  841,  838,  845,  841,  848,    0,  848,  841,  849,
      845,  850,  843,  839,  840,  846,  842,  843,  844,  847,
      851,  852,  846,  853,  850,    0,  847,  848,  841,  849,
      845,  850,  848,  855,  848,  856,  849,  854,  850,  859,
      851,  852,  846,  853,    0,  860,  847,  851,  852,  861,
      853,  850,  854,  855,  848,  856,  849,  854,  850,  859,

      855,  857,  856,  858,  854,  860,  859,  851,  852,  863,
      853,  858,  860,  865,  857,  867,  861,  868,    0,  854,
      855,  857,  856,  858,  854,  871,  859,    0,  857,    0,
      858,  870,  860,  873,  872,  875,  863,  876,  858,    0,
      865,  857,  867,  874,  868,  871,  870,  878,  857,  872,
      858,  870,  871,  873,  872,  875,  874,  876,  870,    0,
      873,  872,  875,  874,  876,  879,  877,  878,  881,  884,
      874,  885,  871,  870,  878,    0,  872,  877,  870,    0,
      873,  872,  875,  874,  876,  886,  877,  887,  888,  884,
      874,  885,  879,  877,  878,  881,  884,  891,  885,  886,

      892,    0,    0,    0,  877,  886,    0,  887,  888,    0,
        0,    0,  886,  877,  887,  888,  884,  891,  885,    0,
      892,    0,    0,    0,  891,    0,  886,  892,    0,    0,
        0,    0,  886,    0,  887,  888,    0,    0,    0,    0,
        0,    0,    0,    0,  891,    0,    0,  892,  894,    0,
        0,  894,  895,    0,  895,  895,  897,    0,  897,  897,
      898,    0,  898,  898,  899,    0,  899,  899,  900,    0,
      900,  900,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,

      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "sqllib.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1567 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 51 "flex_lexer.l"


#line 1815 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 894 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 893 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 120:
#line 184 "flex_lexer.l"
case 121:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2549 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 894 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 894 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 893);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 215 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
