#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 68
#define YY_END_OF_BUFFER 69
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[455] =
    {   0,
        0,    0,    2,    2,   69,   68,    4,   68,   61,   68,
       61,   61,   64,   61,   61,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,    2,    2,    3,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    4,    0,    0,   67,    1,   63,   62,   64,
       59,   58,   60,   66,   66,   66,   52,   66,   53,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   54,   55,   66,   66,   66,   66,   66,   66,   66,

       66,   56,   57,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,    2,    2,    2,    2,    2,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,   65,   62,   45,
       66,   46,   47,   66,   66,   66,   66,   66,   48,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,

       49,   66,   66,   66,   66,   66,   66,   66,   66,   50,
       51,   66,   66,   66,   66,   66,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,   66,   66,   66,   66,   66,
       66,   66,   66,   35,   66,   36,   37,   38,   66,   66,
       66,   66,   66,   66,   39,   66,   40,   41,   42,   66,
       43,   66,   44,   66,   66,   66,   66,   66,   66,   66,

       66,   66,   66,   66,   66,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,   22,   66,   66,   66,   66,
       23,   66,   66,   66,   24,   66,   66,   25,   26,   66,
       66,   27,   66,   66,   28,   29,   66,   30,   66,   31,
       32,   66,   66,   33,   34,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,   66,   10,   66,   11,   66,
       12,   66,   13,   14,   15,   16,   66,   17,   18,   19,
       20,   21,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    7,
        8,   66,   66,    9,    2,    2,    2,    2,    2,    5,
        6,    2,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,    5,   10,
       11,   12,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   29,
        1,    1,    1,    5,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   29,   55,   56,   57,   58,   59,   60,   61,
       62,   29,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4
    } ;

static yyconst flex_int16_t yy_base[462] =
    {   0,
        0,    0,   62,    0,  367, 1877,  123,    0, 1877,  344,
      325,  318,  119,  118,  315,  107,  115,  109,  153,    0,
      113,  112,  122,  120,  120,  158,  171,  173,  169,  137,
      142,  187,  168,    0,  146,  191,  293,    0,  280,  275,
      271,  211,  210,  262,  243,  299,  345,  395,  190,  291,
      229,  219,  441,  296,  298,  491,  537,  240,  281,  587,
      633,  327,  232,  266,  224, 1877, 1877,  217,  200,  229,
     1877, 1877, 1877,    0,  239,  181,  227,  121,    0,  305,
      313,  206,  228,  328,  261,  237,  264,  267,  295,  320,
      309,  361,  339,  347,  351,  360,  358,  342,  348,  372,

      384,    0,  388,  349,  384,  395,  391,  405,  396,  393,
      402,  411,  408,  416,    0,  273,  198,  183,    0,    0,
      178,  141,  270,    0,    0,    0,  426,  444,  448,  490,
      479,  437,  495,  523,  525,  554,  586,  576,  591,  628,
      598,  620,  638,  649,  696,  662,  689,  698,  706,  727,
      730,  737,  713,  728,  742,  760,  764,  788,  774,  791,
      792,  796,  820,  828,  827,  830,  825, 1877,  135,    0,
      427,    0,    0,  396,  402,  405,  438,  417,    0,  470,
      472,  485,  463,  485,  500,  500,  465,  514,  519,  539,
      547,  562,  556,  515,  568,  545,  579,  622,  638,  573,

        0,  634,  590,  650,  651,  670,  671,  691,  760,    0,
        0,  759,  771,  817,  829,  666,    0,  132,  842,  843,
      859,  866,  871,  874,  881,  902,  903,  905,  910,  913,
      920,  934,  941,  937,  951,  964,  968,  981,  969,  973,
     1002, 1010, 1003, 1015, 1012, 1011, 1039, 1054, 1042, 1025,
     1071, 1072, 1075, 1076, 1093, 1103, 1088, 1124, 1110, 1125,
     1127, 1139, 1156, 1168, 1141,  842,  867,  874,  871,  930,
      948,  915,  960,    0,  923,    0,    0,    0,  955,  999,
     1069, 1090, 1105, 1122,    0, 1033,    0,    0,    0, 1131,
        0, 1145,    0, 1064, 1149, 1151, 1092, 1151, 1175, 1174,

     1171, 1185, 1170, 1188, 1192, 1195, 1197, 1204, 1209, 1205,
     1232, 1237, 1236, 1239, 1244, 1241, 1253, 1268, 1280, 1283,
     1295, 1285, 1319, 1322, 1323, 1346, 1324, 1336, 1351, 1358,
     1354, 1363, 1385, 1386, 1387, 1397, 1394, 1418, 1395, 1426,
     1427, 1454, 1441, 1449, 1459,    0, 1193, 1193, 1233, 1275,
        0, 1294, 1312, 1317,    0, 1388, 1257,    0,    0, 1287,
     1415,    0, 1433, 1319,    0,    0, 1434,    0, 1428,    0,
        0, 1458, 1464,    0,    0, 1482, 1487, 1489, 1500, 1492,
     1496, 1497, 1505, 1529, 1528, 1533, 1543, 1540, 1551, 1567,
     1572, 1575, 1580, 1584, 1589, 1611, 1613, 1616, 1623, 1621,

     1626, 1628, 1644, 1655, 1657, 1456,    0, 1481,    0, 1431,
        0, 1497,    0,    0,    0,    0, 1523,    0,    0,    0,
        0,    0, 1660, 1659, 1687, 1672, 1696, 1688, 1699, 1701,
     1711, 1728, 1729, 1738, 1739, 1740, 1742, 1743, 1750,    0,
        0, 1539, 1463,    0, 1752, 1779, 1780, 1781, 1782,    0,
        0, 1789, 1790, 1877, 1852, 1856,  133, 1860, 1864, 1868,
     1872
    } ;

static yyconst flex_int16_t yy_def[462] =
    {   0,
      454,    1,  454,    3,  454,  454,  454,  455,  454,  456,
      454,  454,  454,  454,  454,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  458,  458,  454,  459,  458,  460,  458,
      458,  458,  458,  458,  461,  461,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,  454,  455,  456,  454,  454,  454,  454,  454,
      454,  454,  454,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,

      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  458,  458,  459,  460,  458,  458,
      458,  458,  458,  458,  458,  458,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,  454,  454,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,

      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  458,  458,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,

      457,  457,  457,  457,  457,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,  457,
      457,  457,  457,  457,   46,   46,   46,   46,   46,  457,
      457,   46,   46,    0,  454,  454,  454,  454,  454,  454,
      454
    } ;

static yyconst flex_int16_t yy_nxt[1940] =
    {   0,
        6,    7,    7,    8,    9,   10,   11,   12,   13,   14,
        9,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   20,   26,   20,   27,   28,   20,   20,   29,
       30,   31,   32,   20,   33,   20,   20,    6,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   20,   26,
       20,   27,   28,   20,   29,   30,   31,   32,   20,   33,
       20,   20,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   38,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   49,   55,   49,   56,   57,   49,
       49,   58,   59,   60,   61,   49,   62,   49,   49,   34,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       49,   55,   49,   56,   57,   49,   58,   59,   60,   61,
       49,   62,   49,   49,   63,   63,   69,   70,   71,   72,
       75,   78,   76,   87,   90,   80,   74,   77,   81,   82,
      218,   89,   88,  169,   91,   92,   94,  116,   63,  218,
       93,   79,  174,  107,  108,  109,   75,   78,   76,   87,
       90,   80,   77,   81,   82,   83,   89,   88,  110,   84,
       91,   92,   94,   85,   95,   93,   79,  174,   96,  107,
      108,  109,   86,   98,   97,  105,  121,  114,  119,  106,
      101,   83,   63,   63,  110,   84,  172,   99,  102,   85,

       95,  217,  103,  100,   96,  104,  127,   86,  169,   98,
       97,  105,  111,  114,  112,  106,  101,  113,  122,  123,
      124,  125,  172,   99,  102,   68,  127,  103,  100,   66,
      104,  143,  127,   63,   63,  127,   69,   70,  111,  179,
      112,  173,  113,  115,  115,  127,  115,  115,  115,  115,
      115,  127,  115,  115,  115,  127,  158,  143,  142,  180,
      159,  127,  170,  184,  179,  127,  128,  173,  129,  168,
      171,  127,  126,  130,  116,   63,  127,  122,  123,  121,
      127,  120,  158,  142,  180,  119,  159,  185,  170,  184,
      127,  183,  128,  186,  129,  171,  115,  160,  130,  115,

      115,  127,  115,  115,  115,  115,  115,  127,  115,  115,
      115,  140,  127,  185,  148,  131,  183,  127,  149,  186,
      141,  187,  147,  160,  150,   73,   68,  127,  175,  177,
      176,   67,  127,  127,  127,  132,  189,  140,  127,  178,
      148,  131,  127,  127,  149,  141,  167,  187,  147,   66,
      150,  181,  127,  188,  175,  177,  176,  127,  182,  127,
      132,  127,  189,  127,  194,  178,  454,  195,  196,  127,
      199,  133,  167,  200,  134,  135,  190,  181,  188,  201,
      205,  127,  197,  182,  198,  454,  191,  127,  127,  454,
      194,  192,  193,  195,  196,  202,  199,  133,  200,  134,

      135,  203,  190,  204,  201,  205,  127,  136,  197,  206,
      198,  137,  191,  207,  208,  138,  192,  193,  209,  210,
      211,  202,  212,  454,  139,  213,  214,  203,  215,  204,
      267,  127,  216,  136,  268,  206,  269,  137,  454,  207,
      208,  138,  127,  266,  209,  210,  211,  271,  212,  139,
      270,  213,  214,  127,  215,  267,  127,  127,  216,  268,
      127,  269,  127,  221,  127,  144,  145,  219,  127,  266,
      454,  146,  271,  127,  454,  220,  270,  127,  454,  127,
      127,  454,  272,  127,  127,  454,  127,  127,  273,  221,
      127,  144,  145,  219,  275,  127,  146,  279,  127,  274,

      220,  454,  127,  151,  222,  127,  127,  127,  272,  127,
      223,  127,  276,  454,  273,  127,  277,  152,  224,  275,
      225,  127,  279,  153,  278,  274,  127,  127,  454,  151,
      222,  127,  127,  127,  280,  223,  454,  127,  276,  226,
      127,  127,  277,  152,  224,  281,  225,  286,  153,  227,
      278,  127,  127,  127,  154,  282,  127,  454,  228,  127,
      280,  127,  155,  283,  454,  226,  156,  127,  454,  157,
      127,  281,  286,  127,  454,  227,  288,  454,  284,  127,
      154,  282,  285,  228,  127,  229,  127,  454,  155,  283,
      127,  156,  127,  287,  157,  289,  127,  454,  127,  161,

      162,  288,  127,  127,  284,  292,  232,  127,  285,  230,
      229,  454,  127,  163,  127,  127,  231,  233,  127,  287,
      294,  289,  127,  127,  235,  161,  162,  127,  127,  127,
      292,  232,  454,  127,  127,  230,  127,  127,  454,  163,
      127,  231,  290,  233,  127,  294,  236,  127,  127,  127,
      235,  234,  127,  291,  127,  454,  127,  293,  164,  127,
      165,  454,  127,  166,  127,  127,  295,  296,  290,  127,
      127,  237,  236,  454,  127,  127,  238,  234,  127,  291,
      127,  127,  297,  293,  164,  127,  165,  243,  166,  127,
      298,  127,  295,  296,  127,  305,  237,  454,  127,  127,

      454,  454,  238,  454,  127,  127,  454,  299,  297,  244,
      127,  239,  127,  243,  127,  245,  298,  454,  454,  454,
      305,  240,  127,  127,  454,  127,  241,  242,  246,  127,
      247,  127,  127,  299,  127,  244,  251,  239,  127,  248,
      127,  245,  127,  127,  127,  252,  127,  240,  127,  127,
      127,  241,  242,  127,  246,  127,  247,  127,  127,  127,
      454,  249,  251,  127,  127,  248,  127,  127,  250,  127,
      127,  252,  127,  127,  127,  253,  127,  454,  127,  127,
      127,  454,  454,  300,  127,  301,  249,  454,  127,  127,
      127,  127,  256,  250,  454,  254,  127,  302,  127,  454,

      127,  253,  127,  127,  127,  258,  127,  127,  127,  300,
      127,  301,  127,  255,  257,  454,  127,  454,  256,  259,
      254,  127,  454,  302,  127,  127,  454,  127,  127,  303,
      127,  258,  127,  127,  127,  127,  127,  454,  127,  255,
      257,  265,  263,  127,  127,  259,  127,  260,  261,  127,
      264,  262,  127,  127,  304,  303,  127,  127,  127,  306,
      454,  127,  127,  127,  127,  454,  127,  265,  263,  127,
      127,  346,  127,  260,  261,  127,  264,  262,  127,  127,
      304,  127,  127,  347,  127,  306,  127,  127,  127,  127,
      127,  127,  454,  454,  454,  127,  346,  127,  348,  454,

      349,  127,  127,  127,  127,  307,  308,  127,  127,  347,
      127,  454,  309,  127,  310,  454,  127,  127,  127,  127,
      127,  127,  312,  127,  348,  349,  127,  127,  352,  313,
      307,  308,  127,  311,  314,  127,  127,  309,  127,  127,
      310,  127,  127,  354,  127,  127,  127,  127,  312,  127,
      127,  454,  127,  317,  352,  313,  127,  127,  311,  454,
      314,  350,  127,  127,  127,  315,  127,  127,  316,  354,
      127,  127,  454,  127,  127,  318,  127,  127,  351,  317,
      127,  127,  355,  127,  127,  322,  350,  127,  320,  323,
      315,  353,  454,  127,  316,  127,  319,  127,  127,  454,

      127,  318,  127,  351,  127,  127,  127,  321,  355,  127,
      127,  322,  127,  454,  320,  323,  353,  127,  324,  127,
      454,  319,  454,  127,  356,  127,  127,  329,  127,  127,
      127,  127,  454,  321,  127,  326,  325,  454,  127,  127,
      327,  127,  127,  328,  324,  127,  127,  127,  127,  454,
      356,  127,  127,  329,  127,  127,  361,  127,  127,  330,
      326,  127,  325,  127,  127,  454,  327,  127,  328,  331,
      127,  127,  127,  127,  332,  127,  127,  454,  127,  454,
      364,  127,  361,  454,  127,  330,  127,  127,  127,  454,
      127,  335,  336,  454,  333,  331,  127,  454,  357,  332,

      127,  454,  334,  127,  339,  337,  364,  127,  127,  127,
      454,  127,  127,  127,  127,  127,  367,  335,  336,  127,
      333,  454,  338,  357,  127,  358,  127,  334,  454,  127,
      339,  337,  127,  127,  359,  127,  127,  127,  454,  127,
      127,  127,  367,  127,  454,  127,  127,  340,  338,  127,
      358,  360,  127,  341,  127,  127,  454,  127,  454,  359,
      127,  127,  362,  127,  127,  342,  127,  127,  343,  127,
      345,  127,  127,  340,  363,  127,  360,  127,  365,  341,
      366,  127,  368,  127,  127,  127,  127,  362,  127,  369,
      370,  342,  127,  344,  343,  345,  371,  372,  127,  363,

      127,  373,  127,  365,  127,  366,  374,  368,  375,  406,
      127,  127,  454,  377,  454,  369,  370,  127,  407,  344,
      127,  127,  371,  372,  376,  127,  373,  454,  378,  127,
      454,  127,  374,  127,  375,  406,  380,  127,  379,  377,
      127,  127,  454,  454,  407,  127,  127,  127,  127,  376,
      382,  127,  127,  127,  378,  127,  127,  127,  127,  408,
      127,  380,  381,  379,  384,  127,  127,  383,  127,  127,
      127,  454,  127,  127,  127,  127,  382,  127,  127,  127,
      127,  127,  454,  127,  127,  408,  127,  381,  414,  127,
      384,  409,  383,  127,  454,  127,  127,  127,  127,  127,

      127,  127,  127,  454,  127,  127,  410,  385,  386,  454,
      127,  127,  454,  414,  127,  454,  127,  409,  415,  127,
      388,  127,  127,  454,  387,  127,  454,  127,  411,  127,
      454,  127,  410,  385,  386,  127,  454,  127,  127,  127,
      127,  127,  412,  415,  127,  388,  127,  454,  389,  387,
      418,  390,  127,  454,  411,  127,  127,  454,  127,  127,
      127,  127,  127,  454,  127,  127,  127,  127,  412,  391,
      127,  454,  127,  389,  127,  418,  390,  454,  127,  127,
      127,  454,  127,  127,  127,  127,  454,  127,  127,  392,
      127,  454,  393,  127,  127,  391,  127,  127,  454,  127,

      127,  127,  394,  127,  454,  127,  413,  127,  454,  399,
      127,  127,  127,  127,  392,  127,  395,  393,  397,  127,
      454,  127,  127,  127,  127,  454,  396,  127,  394,  127,
      127,  127,  413,  127,  127,  399,  127,  127,  416,  127,
      454,  395,  400,  127,  397,  417,  127,  127,  127,  398,
      419,  396,  401,  454,  127,  127,  127,  127,  127,  420,
      127,  442,  127,  127,  416,  127,  402,  404,  400,  127,
      127,  417,  403,  421,  398,  405,  419,  127,  401,  127,
      422,  440,  454,  127,  420,  127,  442,  127,  127,  454,
      127,  127,  402,  404,  451,  127,  127,  403,  127,  421,

      454,  405,  127,  423,  441,  127,  422,  440,  426,  427,
      127,  443,  127,  127,  424,  127,  127,  454,  127,  451,
      127,  428,  454,  127,  127,  127,  425,  454,  127,  423,
      441,  127,  127,  127,  426,  427,  127,  443,  127,  127,
      424,  127,  127,  127,  127,  127,  444,  428,  127,  127,
      127,  430,  425,  127,  429,  450,  127,  127,  127,  127,
      454,  127,  454,  454,  127,  127,  127,  127,  454,  127,
      127,  127,  444,  454,  431,  127,  127,  430,  454,  127,
      429,  450,  127,  127,  454,  127,  454,  127,  127,  127,
      127,  127,  434,  127,  127,  433,  127,  454,  432,  431,

      127,  127,  454,  127,  127,  127,  454,  454,  127,  127,
      454,  127,  127,  454,  127,  435,  127,  127,  434,  454,
      127,  433,  127,  432,  454,  127,  127,  127,  127,  436,
      454,  127,  127,  127,  454,  454,  127,  127,  454,  127,
      435,  127,  127,  438,  127,  127,  454,  127,  454,  127,
      127,  454,  127,  127,  437,  436,  454,  127,  127,  127,
      439,  454,  127,  127,  127,  127,  454,  454,  127,  438,
      127,  127,  127,  127,  127,  127,  127,  127,  454,  437,
      127,  454,  127,  454,  127,  445,  439,  127,  127,  127,
      454,  127,  454,  127,  454,  127,  127,  127,  454,  127,

      454,  127,  127,  127,  127,  127,  454,  454,  127,  454,
      446,  445,  127,  448,  127,  127,  127,  127,  127,  454,
      127,  127,  454,  127,  127,  454,  447,  127,  454,  127,
      127,  454,  127,  127,  454,  127,  446,  127,  127,  448,
      454,  127,  454,  127,  127,  127,  454,  127,  127,  127,
      454,  447,  454,  127,  127,  127,  127,  127,  127,  127,
      127,  449,  127,  454,  127,  127,  127,  454,  127,  454,
      127,  127,  127,  454,  127,  127,  127,  454,  127,  127,
      127,  127,  127,  454,  127,  127,  127,  449,  127,  127,
      127,  454,  127,  454,  127,  127,  452,  127,  127,  127,

      127,  127,  454,  127,  127,  127,  127,  454,  454,  454,
      454,  127,  453,  127,  454,  127,  127,  127,  127,  454,
      454,  127,  452,  127,  127,  127,  127,  454,  454,  454,
      454,  127,  127,  454,  454,  454,  454,  453,  454,  454,
      127,  127,  127,  127,  454,  454,  454,  454,  454,  454,
      127,  127,   64,  454,  454,   64,   65,  454,   65,   65,
      115,  454,  115,  115,  117,  454,  117,  117,  118,  454,
      118,  118,  127,  454,  127,  127,    5,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,

      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454
    } ;

static yyconst flex_int16_t yy_chk[1940] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    7,    7,   13,   13,   14,   14,
       16,   17,   16,   21,   23,   18,  457,   16,   18,   18,
      218,   22,   21,  169,   24,   24,   25,   35,   35,  122,
       24,   17,   78,   30,   31,   31,   16,   17,   16,   21,
       23,   18,   16,   18,   18,   19,   22,   21,   31,   19,
       24,   24,   25,   19,   26,   24,   17,   78,   26,   30,
       31,   31,   19,   27,   26,   29,  121,   33,  118,   29,
       28,   19,   36,   36,   31,   19,   76,   27,   28,   19,

       26,  117,   28,   27,   26,   28,   49,   19,   69,   27,
       26,   29,   32,   33,   32,   29,   28,   32,   42,   42,
       43,   43,   76,   27,   28,   68,   49,   28,   27,   65,
       28,   52,   49,   63,   63,   52,   70,   70,   32,   82,
       32,   77,   32,   45,   45,   51,   45,   45,   45,   45,
       45,   49,   45,   45,   45,   52,   58,   52,   51,   83,
       58,   52,   75,   86,   82,   51,   45,   77,   45,   64,
       75,   51,   44,   45,  116,  116,   58,  123,  123,   41,
       52,   40,   58,   51,   83,   39,   58,   87,   75,   86,
       51,   85,   45,   88,   45,   75,   37,   59,   45,   46,

       46,   58,   46,   46,   46,   46,   46,   50,   46,   46,
       46,   50,   54,   87,   55,   46,   85,   59,   55,   88,
       50,   89,   54,   59,   55,   15,   12,   50,   80,   81,
       80,   11,   54,   50,   55,   46,   91,   50,   54,   81,
       55,   46,   59,   62,   55,   50,   62,   89,   54,   10,
       55,   84,   50,   90,   80,   81,   80,   54,   84,   55,
       46,   47,   91,   62,   93,   81,    5,   94,   95,   62,
       97,   47,   62,   98,   47,   47,   92,   84,   90,   99,
      104,   47,   96,   84,   96,    0,   92,   47,   62,    0,
       93,   92,   92,   94,   95,  100,   97,   47,   98,   47,

       47,  101,   92,  103,   99,  104,   47,   48,   96,  105,
       96,   48,   92,  106,  107,   48,   92,   92,  108,  109,
      110,  100,  111,    0,   48,  111,  112,  101,  113,  103,
      174,   48,  114,   48,  175,  105,  176,   48,    0,  106,
      107,   48,  127,  171,  108,  109,  110,  178,  111,   48,
      177,  111,  112,  132,  113,  174,   48,   53,  114,  175,
      128,  176,  127,  129,  129,   53,   53,  128,  127,  171,
        0,   53,  178,  132,    0,  128,  177,   53,    0,  132,
      128,    0,  180,   53,  129,    0,  128,  127,  181,  129,
      129,   53,   53,  128,  183,  131,   53,  187,  132,  182,

      128,    0,   53,   56,  130,  128,  130,   56,  180,  129,
      131,  133,  184,    0,  181,  131,  185,   56,  133,  183,
      133,  131,  187,   56,  186,  182,  130,   56,    0,   56,
      130,  133,  130,   56,  188,  131,    0,  133,  184,  134,
      131,  135,  185,   56,  133,  189,  133,  194,   56,  134,
      186,  130,   56,   57,   57,  190,  133,    0,  135,  134,
      188,  135,   57,  191,    0,  134,   57,  135,    0,   57,
      136,  189,  194,   57,    0,  134,  196,    0,  192,   57,
       57,  190,  193,  135,  134,  136,  135,    0,   57,  191,
      136,   57,  138,  195,   57,  197,  136,    0,   57,   60,

       60,  196,  137,   60,  192,  200,  138,  139,  193,  137,
      136,    0,  138,   60,  141,  136,  137,  139,  138,  195,
      203,  197,  137,   60,  141,   60,   60,  139,  137,   60,
      200,  138,    0,  139,  141,  137,  142,  138,    0,   60,
      141,  137,  198,  139,  140,  203,  142,  137,   60,   61,
      141,  140,  139,  199,  143,    0,  142,  202,   61,  141,
       61,    0,  142,   61,  140,  144,  204,  205,  198,   61,
      140,  143,  142,    0,  143,   61,  144,  140,  146,  199,
      143,  142,  206,  202,   61,  144,   61,  146,   61,  140,
      207,  144,  204,  205,   61,  216,  143,    0,  146,  143,

        0,    0,  144,    0,  146,  147,    0,  208,  206,  147,
      144,  145,  145,  146,  148,  148,  207,    0,    0,    0,
      216,  145,  149,  146,    0,  147,  145,  145,  149,  153,
      149,  147,  145,  208,  148,  147,  153,  145,  145,  150,
      148,  148,  149,  150,  154,  154,  151,  145,  149,  153,
      147,  145,  145,  152,  149,  153,  149,  145,  155,  148,
        0,  151,  153,  150,  154,  150,  151,  149,  152,  150,
      154,  154,  151,  152,  153,  156,  156,    0,  155,  152,
      157,    0,    0,  209,  155,  212,  151,    0,  150,  154,
      159,  151,  159,  152,    0,  157,  156,  213,  152,    0,

      157,  156,  156,  155,  158,  161,  157,  160,  161,  209,
      159,  212,  162,  158,  160,    0,  159,    0,  159,  162,
      157,  156,    0,  213,  158,  157,    0,  160,  161,  214,
      158,  161,  162,  160,  161,  159,  163,    0,  162,  158,
      160,  167,  165,  165,  164,  162,  166,  163,  164,  158,
      166,  164,  160,  161,  215,  214,  163,  162,  219,  220,
        0,  167,  163,  165,  164,    0,  166,  167,  165,  165,
      164,  266,  166,  163,  164,  221,  166,  164,  219,  220,
      215,  163,  222,  267,  219,  220,  167,  223,  165,  164,
      224,  166,    0,    0,    0,  221,  266,  225,  268,    0,

      269,  221,  222,  219,  220,  223,  224,  223,  222,  267,
      224,    0,  225,  223,  226,    0,  224,  225,  226,  227,
      221,  228,  229,  225,  268,  269,  229,  222,  272,  230,
      223,  224,  223,  227,  231,  224,  231,  225,  226,  227,
      226,  228,  225,  275,  226,  227,  229,  228,  229,  230,
      232,    0,  229,  234,  272,  230,  231,  233,  227,    0,
      231,  270,  231,  226,  227,  232,  228,  235,  233,  275,
      232,  229,    0,  234,  230,  235,  232,  233,  271,  234,
      236,  231,  279,  233,  237,  239,  270,  235,  237,  240,
      232,  273,    0,  235,  233,  232,  236,  238,  234,    0,

      236,  235,  233,  271,  237,  239,  236,  238,  279,  240,
      237,  239,  235,    0,  237,  240,  273,  238,  241,  243,
        0,  236,    0,  238,  280,  236,  242,  246,  245,  237,
      239,  244,    0,  238,  240,  243,  242,    0,  241,  243,
      244,  250,  238,  245,  241,  243,  242,  246,  245,    0,
      280,  244,  242,  246,  245,  247,  286,  244,  249,  247,
      243,  250,  242,  241,  243,    0,  244,  250,  245,  248,
      248,  242,  246,  245,  249,  247,  244,    0,  249,    0,
      294,  247,  286,    0,  249,  247,  250,  251,  252,    0,
      248,  253,  254,    0,  251,  248,  248,    0,  281,  249,

      247,    0,  252,  249,  257,  255,  294,  251,  252,  255,
        0,  253,  254,  251,  252,  248,  297,  253,  254,  256,
      251,    0,  256,  281,  257,  282,  259,  252,    0,  255,
      257,  255,  251,  252,  283,  255,  253,  254,    0,  256,
      258,  260,  297,  261,    0,  256,  259,  258,  256,  257,
      282,  284,  259,  261,  255,  262,    0,  265,    0,  283,
      258,  260,  290,  261,  256,  262,  258,  260,  263,  261,
      265,  259,  263,  258,  292,  262,  284,  265,  295,  261,
      296,  262,  298,  265,  264,  258,  260,  290,  261,  299,
      300,  262,  263,  264,  263,  265,  301,  302,  263,  292,

      262,  303,  265,  295,  264,  296,  304,  298,  305,  347,
      264,  306,    0,  307,    0,  299,  300,  263,  348,  264,
      308,  310,  301,  302,  306,  309,  303,    0,  308,  264,
        0,  306,  304,  307,  305,  347,  310,  306,  309,  307,
      308,  310,    0,    0,  348,  309,  308,  310,  311,  306,
      312,  309,  313,  312,  308,  314,  306,  316,  307,  349,
      315,  310,  311,  309,  315,  308,  310,  313,  311,  317,
      309,    0,  313,  312,  311,  314,  312,  316,  313,  312,
      315,  314,    0,  316,  318,  349,  315,  311,  357,  317,
      315,  350,  313,  311,    0,  317,  319,  313,  312,  320,

      314,  322,  316,    0,  318,  315,  352,  319,  320,    0,
      318,  321,    0,  357,  317,    0,  319,  350,  360,  320,
      322,  322,  319,    0,  321,  320,    0,  322,  353,  318,
        0,  321,  352,  319,  320,  323,    0,  321,  324,  325,
      327,  319,  354,  360,  320,  322,  322,    0,  323,  321,
      364,  324,  328,    0,  353,  323,  321,    0,  324,  325,
      327,  323,  326,    0,  324,  325,  327,  329,  354,  326,
      331,    0,  328,  323,  330,  364,  324,    0,  328,  332,
      323,    0,  326,  324,  325,  327,    0,  329,  326,  330,
      331,    0,  332,  329,  330,  326,  331,  328,    0,  332,

      330,  333,  334,  335,    0,  332,  356,  326,    0,  339,
      337,  339,  329,  336,  330,  331,  335,  332,  337,  330,
        0,  333,  334,  335,  332,    0,  336,  333,  334,  335,
      337,  339,  356,  336,  338,  339,  337,  339,  361,  336,
        0,  335,  340,  341,  337,  363,  333,  334,  335,  338,
      367,  336,  341,    0,  338,  337,  339,  343,  336,  369,
      338,  410,  340,  341,  361,  344,  342,  344,  340,  341,
      342,  363,  343,  372,  338,  345,  367,  343,  341,  338,
      373,  406,    0,  343,  369,  344,  410,  340,  341,    0,
      342,  344,  342,  344,  443,  345,  342,  343,  376,  372,

        0,  345,  343,  377,  408,  378,  373,  406,  380,  382,
      344,  412,  381,  382,  378,  342,  379,    0,  376,  443,
      345,  383,    0,  377,  376,  378,  379,    0,  380,  377,
      408,  378,  381,  382,  380,  382,  379,  412,  381,  382,
      378,  383,  379,  376,  385,  384,  417,  383,  377,  386,
      378,  386,  379,  380,  384,  442,  388,  381,  382,  387,
        0,  379,    0,    0,  385,  384,  383,  389,    0,  386,
      385,  384,  417,    0,  387,  386,  388,  386,    0,  387,
      384,  442,  388,  390,    0,  387,    0,  389,  391,  385,
      384,  392,  393,  389,  386,  391,  393,    0,  390,  387,

      394,  388,    0,  390,  387,  395,    0,    0,  391,  390,
        0,  392,  389,    0,  391,  394,  393,  392,  393,    0,
      394,  391,  393,  390,    0,  395,  394,  396,  390,  397,
        0,  395,  398,  391,    0,    0,  392,  400,    0,  399,
      394,  393,  401,  402,  402,  394,    0,  396,    0,  397,
      395,    0,  398,  396,  399,  397,    0,  400,  398,  399,
      403,    0,  401,  400,  402,  399,    0,    0,  401,  402,
      402,  404,  396,  405,  397,  424,  423,  398,    0,  399,
      403,    0,  400,    0,  399,  423,  403,  401,  426,  402,
        0,  404,    0,  405,    0,  424,  423,  404,    0,  405,

        0,  424,  423,  425,  428,  403,    0,    0,  426,    0,
      425,  423,  427,  429,  426,  429,  404,  430,  405,    0,
      424,  423,    0,  425,  428,    0,  427,  431,    0,  425,
      428,    0,  427,  426,    0,  429,  425,  430,  427,  429,
        0,  429,    0,  430,  432,  433,    0,  431,  425,  428,
        0,  427,    0,  431,  434,  435,  436,  427,  437,  438,
      429,  434,  430,    0,  432,  433,  439,    0,  445,    0,
      432,  433,  431,    0,  434,  435,  436,    0,  437,  438,
      434,  435,  436,    0,  437,  438,  439,  434,  445,  432,
      433,    0,  439,    0,  445,  446,  447,  448,  449,  434,

      435,  436,    0,  437,  438,  452,  453,    0,    0,    0,
        0,  439,  448,  445,    0,  446,  447,  448,  449,    0,
        0,  446,  447,  448,  449,  452,  453,    0,    0,    0,
        0,  452,  453,    0,    0,    0,    0,  448,    0,    0,
      446,  447,  448,  449,    0,    0,    0,    0,    0,    0,
      452,  453,  455,    0,    0,  455,  456,    0,  456,  456,
      458,    0,  458,  458,  459,    0,  459,  459,  460,    0,
      460,  460,  461,    0,  461,  461,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,

      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "sqllib.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1048 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 50 "flex_lexer.l"


#line 1288 "flex_lexer.cpp"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 455 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 454 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 52 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 54 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 62:
#line 124 "flex_lexer.l"
case 63:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOAT;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INT;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 1725 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 455 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 455 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 454);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 155 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[Error] SQL Lexer: %s\n",msg); return 0;
}
