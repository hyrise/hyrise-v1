#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 106
#define YY_END_OF_BUFFER 107
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[749] =
    {   0,
        0,    0,    2,    2,  107,  106,    4,  106,   99,  106,
       99,   99,  102,   99,   99,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,    2,    2,
        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    4,    0,    0,  105,    1,  101,  100,  102,
       97,   96,   98,  104,  104,  104,  104,  104,   88,  104,
       89,  104,  104,  104,  104,  104,  104,  104,  104,  104,

      104,  104,  104,  104,  104,  104,  104,  104,   90,  104,
       91,   92,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,   93,   94,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,   95,  104,  104,
      104,  104,  104,  104,  104,    2,    2,    2,    2,    2,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,  103,
      100,   77,  104,   78,  104,  104,   79,   80,  104,  104,
      104,  104,  104,  104,  104,  104,   81,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,   82,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,   83,  104,  104,  104,  104,  104,  104,
      104,   84,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,   85,  104,  104,  104,  104,   86,  104,
       87,  104,  104,  104,  104,  104,  104,  104,  104,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,  104,
      104,  104,  104,  104,   61,  104,  104,  104,  104,  104,
      104,  104,   62,  104,  104,   63,  104,  104,  104,  104,

       64,   65,   66,  104,  104,   67,  104,  104,  104,  104,
      104,  104,  104,   68,  104,   69,   70,   71,  104,   72,
      104,  104,  104,   73,  104,  104,  104,   74,  104,  104,
      104,  104,  104,  104,   75,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,   76,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,   45,   46,  104,
      104,  104,  104,  104,  104,  104,   47,  104,  104,  104,
      104,  104,  104,  104,  104,  104,   48,  104,  104,  104,
       49,   50,  104,  104,  104,   51,   52,   53,  104,  104,
       54,   55,  104,  104,  104,   56,  104,  104,  104,  104,
       57,  104,  104,   58,  104,  104,  104,   59,  104,   60,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,  104,   22,  104,  104,   23,  104,   24,
      104,   25,   26,  104,   27,   28,   29,  104,   30,   31,
      104,   32,   33,  104,   34,  104,   35,  104,   36,  104,
       37,   38,   39,  104,   40,  104,  104,   41,   42,   43,
       44,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,   10,

       11,   12,   13,   14,   15,  104,   16,   17,  104,   18,
       19,  104,   20,   21,  104,  104,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    7,  104,    8,  104,    9,    2,    2,
        2,    2,    2,    5,    6,    2,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,    5,   10,
       11,   12,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[756] =
    {   0,
        0,    0,   65,    0,  347, 2997,  129,    0, 2997,  334,
      329,  326,  125,  124,  323,  121,  121,  129,  123,  110,
      161,  119,  141,  172,  121,  133,  175,  130,  180,  209,
      171,    0,  189,  255,  298,  210,  144,  184,    0,  197,
      209,  329,    0,  320,  307,  292,  235,  234,  285,  355,
      413,  465,  230,  240,  513,  256,  306,  561,  304,  244,
      368,  332,  613,  661,  409,  300,  390,  711,  763,  811,
      424,  442,  246,  288,  284, 2997, 2997,  250,  241,  244,
     2997, 2997, 2997,    0,  242,  232,  350,  359,  264,  410,
        0,  416,  405,  278,  255,  452,  414,  291,  309,  466,

      353,  353,  421,  456,  457,  458,  467,  460,    0,  465,
      501,  473,  483,  478,  506,  512,  523,  513,  509,  513,
      523,  530,    0,  533,  521,  542,  535,  558,  539,  549,
      569,  554,  558,  577,  577,  570,  570,  569,  567,  583,
      586,  588,  586,  595,  600,    0,  253,  222,  210,    0,
        0,  205,  199,  321,    0,    0,    0,  618,  626,  624,
      648,  680,  685,  698,  637,  723,  735,  719,  734,  859,
      788,  779,  794,  909,  817,  823,  845,  854,  857,  875,
      891,  842,  785,  899,  958,  924,  921,  876,  942,  955,
      981,  983,  996,  997, 1007, 1020,  939, 1026, 1022, 1035,

     1056, 1057, 1059, 1065, 1074, 1070, 1100, 1109, 1099, 1111,
     1114, 1124, 1137, 1148, 1143, 1172, 1166, 1154, 1187, 2997,
      154,    0,  616,    0,  627,  624,    0,    0,  622,  649,
      662,  695,  731,  738,  772,  763,    0,  795,  807,  815,
      853,  856,  879,  931,  949,  939,  957, 1009,    0, 1010,
     1044, 1078, 1117, 1147, 1163, 1163, 1173, 1185, 1188, 1189,
     1196, 1175, 1188,    0, 1183, 1204, 1204, 1210, 1215, 1201,
     1204,    0, 1214, 1208, 1226, 1227, 1219, 1222, 1236, 1222,
     1236, 1240, 1241,    0, 1224, 1228, 1230, 1239,    0, 1239,
        0, 1242, 1246, 1242, 1264, 1252, 1246, 1250, 1262,    0,

      152, 1271, 1274, 1275, 1276, 1286, 1280, 1284, 1299, 1297,
     1305, 1310, 1329, 1328, 1338, 1340, 1351, 1363, 1353, 1364,
     1368, 1377, 1382, 1403, 1374, 1408, 1405, 1407, 1413, 1436,
     1431, 1446, 1437, 1442, 1475, 1461, 1467, 1485, 1490, 1491,
     1499, 1500, 1515, 1501, 1525, 1529, 1530, 1554, 1559, 1544,
     1568, 1558, 1563, 1589, 1573, 1592, 1598, 1594, 1608, 1617,
     1623, 1613, 1622, 1627, 1638, 1646, 1648, 1671, 1652, 1676,
     1657, 1680, 1682, 1710, 1712, 1697, 1722, 1728, 1731, 1301,
     1356, 1359, 1401, 1447,    0, 1463, 1488, 1526, 1554, 1610,
     1670, 1710,    0, 1728, 1732,    0, 1729, 1732, 1730, 1750,

        0,    0,    0, 1754, 1743,    0, 1747, 1750, 1749, 1745,
     1753, 1758, 1761,    0, 1769,    0,    0,    0, 1764,    0,
     1773, 1768, 1771,    0, 1785, 1773, 1775,    0, 1794, 1784,
     1781, 1780, 1788, 1799,    0, 1799, 1796, 1802, 1794, 1807,
     1799, 1794, 1818, 1801, 1816, 1820, 1825,    0, 1833, 1836,
     1828, 1838, 1830, 1834, 1844, 1862, 1859, 1887, 1874, 1884,
     1890, 1892, 1898, 1916, 1908, 1913, 1930, 1938, 1946, 1944,
     1952, 1954, 1982, 1956, 1970, 1986, 1988, 1987, 1992, 2010,
     2028, 2031, 2016, 2040, 2026, 2032, 2042, 2061, 2045, 2070,
     2066, 2082, 2064, 2085, 2101, 2106, 2096, 2124, 2110, 2136,

     2135, 2134, 2140, 2139, 2152, 2164, 2158, 2170, 2194, 2189,
     2188, 2200, 2213, 2210, 2202, 2218, 2224,    0,    0, 1818,
     1842, 1868, 1923, 1939, 1952, 2056,    0, 2091, 2100, 2159,
     2217, 2232, 2219, 2228, 2239, 2239,    0, 2246, 2237, 2237,
        0,    0, 2239, 2242, 2251,    0,    0,    0, 2266, 2248,
        0,    0, 2251, 2266, 2263,    0, 2272, 2257, 2275, 2280,
     2264, 2267, 2286,    0, 2284, 2287, 2287,    0, 2274,    0,
     2292, 2296, 2297, 2300, 2302, 2326, 2321, 2340, 2308, 2331,
     2354, 2336, 2364, 2362, 2365, 2375, 2366, 2396, 2408, 2394,
     2418, 2419, 2410, 2404, 2429, 2433, 2444, 2454, 2450, 2462,

     2463, 2472, 2478, 2467, 2484, 2502, 2486, 2496, 2508, 2521,
     2530, 2538, 2536, 2526, 2534, 2566, 2551, 2560, 2570, 2575,
     2579, 2591, 2588, 2306,    0, 2301, 2332, 2328, 2363,    0,
     2357,    0,    0, 2378,    0,    0,    0, 2503,    0,    0,
     2556,    0,    0, 2582,    0, 2585,    0, 2574,    0, 2602,
     2587,    0,    0, 2597,    0, 2614, 2597,    0,    0,    0,
        0, 2614, 2616, 2620, 2624, 2645, 2642, 2630, 2633, 2646,
     2654, 2670, 2658, 2664, 2679, 2687, 2682, 2683, 2688, 2698,
     2700, 2704, 2712, 2721, 2713, 2716, 2722, 2746, 2738, 2737,
     2750, 2754, 2756, 2782, 2772, 2780, 2786, 2790, 2791,    0,

        0,    0,    0,    0,    0, 2610,    0,    0, 2764,    0,
        0, 2752,    0,    0, 2782, 2796, 2804, 2808, 2812, 2816,
     2820, 2821, 2830, 2826, 2834, 2844, 2856, 2858, 2860, 2862,
     2866, 2879, 2870,    0, 2783,    0, 2854,    0, 2884, 2895,
     2894, 2896, 2898,    0,    0, 2900, 2908, 2997, 2972, 2976,
      151, 2980, 2984, 2988, 2992
    } ;

static yyconst flex_int16_t yy_def[756] =
    {   0,
      748,    1,  748,    3,  748,  748,  748,  749,  748,  750,
      748,  748,  748,  748,  748,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  752,  752,
      748,  753,  752,  754,  752,  752,  752,  752,  752,  755,
      755,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,  748,  749,  750,  748,  748,  748,  748,  748,
      748,  748,  748,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  752,  752,  753,  754,  752,
      752,  752,  752,  752,  752,  752,  752,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,  748,
      748,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  752,

      752,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,  751,  751,  751,  751,  751,   51,   51,
       51,   51,   51,  751,  751,   51,   51,    0,  748,  748,
      748,  748,  748,  748,  748
    } ;

static yyconst flex_int16_t yy_nxt[3063] =
    {   0,
        6,    7,    7,    8,    9,   10,   11,   12,   13,   14,
        9,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   32,   32,   32,    6,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   32,   32,   32,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   43,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,

       66,   66,   66,   39,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   66,   66,   66,
       73,   73,   79,   80,   81,   82,   85,   90,   86,   96,
       99,   92,  105,   97,   87,  100,   88,  113,  106,  114,
      118,   89,   98,  107,   84,   93,  143,   91,   94,   95,
      301,  108,  221,   85,   90,   86,   96,   99,   92,  105,
       97,   87,  100,   88,  113,  106,  114,  118,   89,   98,
      107,  101,   93,  143,   91,   94,   95,  102,  108,  109,
      103,  115,  119,  104,  126,  116,  110,  111,  147,   73,

      127,  117,  112,  144,  145,  128,  120,  301,  101,  129,
       73,   73,  121,  152,  102,  150,  109,  103,  115,  119,
      104,  126,  116,  110,  111,  300,  122,  127,  117,  112,
      144,  145,  128,  120,  123,  140,  129,  141,  124,  121,
      142,  125,  153,  154,  155,  156,  170,   73,   73,  221,
      171,   79,   80,  122,  147,   73,  158,  222,   78,  172,
      188,  123,  140,  223,  141,  124,  158,  142,  125,  130,
      173,  131,  158,  170,  132,  174,  158,  171,  228,  179,
      158,  133,  134,  158,  222,  180,  172,  188,  237,   76,
      223,  220,  158,  158,  235,  157,  130,  173,  131,  158,

      152,  132,  174,  158,  236,  228,  179,  158,  133,  134,
      135,  136,  180,  151,  137,  237,  158,  243,  181,  158,
      158,  235,  158,  244,  138,  150,  182,  139,  153,  154,
      187,  236,  146,   83,   78,   77,  158,  135,  136,   76,
      158,  137,  158,  158,  243,  181,  748,  158,  158,  158,
      244,  138,  192,  182,  139,  146,  146,  187,  146,  146,
      146,  146,  146,  158,  146,  146,  146,  158,  158,  158,
      159,  226,  160,  224,  227,  158,  248,  748,  161,  192,
      162,  225,  249,  748,  189,  163,  748,  748,  190,  748,
      748,  748,  748,  748,  191,  158,  748,  159,  226,  160,

      224,  227,  748,  248,  158,  161,  202,  162,  225,  249,
      203,  189,  163,  146,  146,  190,  146,  146,  146,  146,
      146,  191,  146,  146,  146,  158,  158,  229,  233,  164,
      234,  158,  200,  202,  748,  748,  217,  203,  201,  231,
      158,  230,  748,  241,  242,  158,  232,  250,  748,  165,
      748,  748,  158,  158,  229,  233,  164,  234,  158,  200,
      158,  218,  219,  217,  748,  201,  231,  158,  230,  238,
      241,  242,  158,  232,  250,  239,  165,  166,  158,  251,
      245,  158,  240,  252,  253,  158,  246,  158,  218,  219,
      256,  167,  257,  247,  168,  169,  238,  254,  262,  748,

      255,  158,  239,  263,  166,  158,  251,  245,  158,  240,
      252,  253,  748,  246,  264,  748,  258,  256,  167,  257,
      247,  168,  169,  265,  254,  262,  259,  255,  158,  158,
      263,  260,  261,  175,  266,  268,  267,  269,  270,  176,
      271,  264,  177,  258,  272,  178,  273,  274,  275,  158,
      265,  748,  276,  259,  277,  278,  158,  281,  260,  261,
      175,  266,  268,  267,  269,  270,  176,  271,  282,  177,
      748,  272,  178,  273,  274,  275,  158,  158,  183,  276,
      285,  277,  278,  279,  281,  184,  185,  286,  280,  287,
      288,  186,  283,  289,  290,  282,  291,  158,  748,  292,

      284,  295,  748,  293,  158,  183,  294,  285,  296,  297,
      279,  298,  184,  185,  286,  280,  287,  288,  186,  283,
      289,  290,  748,  291,  158,  193,  292,  284,  295,  158,
      293,  299,  380,  294,  158,  296,  297,  748,  298,  194,
      158,  302,  158,  381,  748,  195,  748,  382,  383,  158,
      748,  748,  193,  158,  158,  303,  158,  748,  299,  380,
      158,  158,  158,  748,  158,  748,  194,  158,  302,  158,
      381,  304,  195,  158,  382,  383,  158,  158,  196,  305,
      158,  158,  303,  384,  158,  385,  197,  158,  748,  158,
      198,  158,  306,  199,  748,  307,  158,  158,  304,  308,

      158,  158,  748,  748,  158,  196,  305,  748,  748,  386,
      384,  158,  385,  197,  158,  309,  158,  198,  748,  306,
      199,  158,  307,  158,  158,  204,  308,  205,  158,  310,
      206,  748,  748,  748,  158,  315,  386,  207,  208,  158,
      748,  158,  309,  158,  748,  316,  311,  158,  158,  748,
      158,  158,  204,  312,  205,  158,  310,  206,  313,  158,
      314,  158,  315,  387,  207,  208,  158,  317,  748,  388,
      158,  158,  316,  311,  158,  209,  210,  158,  158,  211,
      312,  748,  158,  748,  389,  313,  158,  314,  748,  212,
      387,  748,  213,  390,  317,  158,  388,  158,  158,  158,

      748,  158,  209,  210,  158,  323,  211,  391,  324,  748,
      158,  389,  748,  748,  748,  158,  212,  321,  322,  213,
      390,  158,  158,  392,  158,  748,  158,  158,  158,  393,
      158,  158,  323,  158,  391,  324,  214,  158,  215,  158,
      328,  216,  158,  748,  321,  322,  748,  158,  158,  748,
      392,  158,  329,  158,  158,  748,  393,  158,  158,  158,
      158,  158,  748,  214,  748,  215,  158,  328,  216,  394,
      158,  330,  336,  158,  158,  158,  318,  331,  158,  329,
      158,  158,  319,  332,  748,  158,  158,  395,  158,  320,
      158,  158,  158,  158,  748,  158,  394,  158,  330,  336,

      158,  333,  158,  318,  331,  158,  396,  158,  158,  319,
      332,  158,  344,  748,  395,  158,  320,  158,  158,  158,
      158,  334,  158,  325,  335,  158,  337,  158,  333,  326,
      748,  748,  748,  396,  158,  158,  327,  158,  158,  344,
      158,  343,  158,  397,  748,  158,  748,  748,  334,  342,
      325,  335,  158,  337,  158,  158,  326,  158,  158,  345,
      158,  748,  158,  327,  158,  398,  748,  158,  343,  399,
      397,  158,  158,  338,  158,  158,  342,  346,  158,  347,
      400,  748,  158,  339,  158,  158,  345,  158,  340,  341,
      748,  158,  398,  348,  158,  349,  399,  158,  158,  158,

      338,  158,  158,  748,  346,  158,  347,  400,  350,  748,
      339,  748,  158,  158,  748,  340,  341,  158,  158,  158,
      348,  158,  349,  158,  158,  401,  158,  351,  352,  748,
      353,  748,  158,  158,  402,  350,  158,  354,  158,  158,
      158,  355,  158,  158,  158,  748,  158,  357,  748,  748,
      158,  158,  401,  356,  351,  352,  158,  353,  158,  158,
      158,  402,  158,  158,  354,  158,  748,  403,  355,  158,
      158,  158,  158,  158,  357,  158,  358,  361,  158,  748,
      356,  158,  359,  158,  362,  158,  158,  360,  748,  158,
      158,  404,  158,  158,  403,  158,  365,  363,  158,  158,

      158,  158,  158,  358,  361,  364,  158,  748,  158,  359,
      158,  362,  368,  158,  360,  158,  158,  158,  404,  158,
      158,  367,  158,  365,  363,  158,  748,  158,  158,  366,
      158,  748,  364,  158,  369,  158,  158,  158,  370,  368,
      158,  748,  158,  158,  748,  158,  748,  158,  367,  405,
      158,  371,  158,  158,  158,  748,  366,  158,  375,  158,
      158,  369,  158,  158,  158,  370,  406,  158,  373,  372,
      378,  374,  158,  158,  158,  748,  405,  158,  371,  158,
      158,  748,  158,  407,  158,  375,  158,  158,  158,  377,
      158,  158,  376,  406,  408,  373,  372,  378,  374,  409,

      158,  410,  158,  158,  411,  412,  158,  415,  158,  158,
      407,  158,  413,  416,  417,  158,  377,  158,  379,  376,
      418,  408,  414,  158,  419,  420,  409,  421,  410,  158,
      158,  411,  412,  422,  415,  158,  423,  424,  425,  413,
      416,  417,  426,  427,  428,  379,  429,  418,  430,  414,
      158,  419,  420,  431,  421,  432,  433,  434,  435,  436,
      422,  437,  438,  423,  424,  425,  439,  440,  443,  426,
      427,  428,  441,  429,  442,  430,  444,  445,  446,  447,
      431,  448,  432,  433,  434,  435,  436,  158,  437,  438,
      449,  158,  450,  439,  440,  443,  158,  748,  748,  441,

      158,  442,  158,  444,  445,  446,  447,  158,  448,  451,
      158,  158,  158,  158,  158,  158,  158,  449,  158,  450,
      158,  158,  158,  158,  455,  452,  158,  158,  454,  158,
      518,  453,  748,  158,  158,  158,  451,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      458,  455,  452,  158,  158,  454,  158,  518,  453,  457,
      158,  456,  158,  748,  158,  158,  748,  158,  158,  461,
      459,  158,  158,  158,  158,  460,  158,  458,  462,  158,
      158,  158,  748,  158,  463,  519,  457,  158,  456,  158,
      467,  158,  158,  158,  158,  520,  461,  459,  158,  158,

      158,  158,  460,  158,  158,  462,  158,  158,  464,  465,
      158,  463,  519,  158,  158,  466,  158,  467,  158,  158,
      158,  158,  520,  470,  158,  158,  158,  158,  469,  158,
      521,  158,  748,  748,  748,  464,  465,  158,  468,  158,
      158,  158,  466,  158,  158,  158,  158,  158,  158,  158,
      470,  158,  158,  158,  472,  469,  158,  521,  158,  473,
      471,  475,  158,  522,  748,  468,  158,  158,  158,  474,
      158,  158,  158,  158,  158,  523,  158,  158,  158,  158,
      158,  472,  158,  158,  748,  158,  473,  471,  475,  158,
      522,  158,  477,  478,  158,  476,  474,  158,  748,  158,

      158,  479,  523,  158,  158,  158,  480,  481,  748,  158,
      158,  158,  524,  748,  748,  482,  158,  158,  158,  477,
      478,  158,  476,  748,  158,  483,  158,  158,  479,  748,
      158,  158,  484,  480,  481,  158,  158,  158,  158,  524,
      485,  158,  482,  158,  158,  487,  158,  748,  158,  748,
      488,  158,  483,  158,  158,  525,  486,  748,  158,  484,
      158,  158,  158,  158,  158,  158,  158,  485,  158,  489,
      158,  490,  487,  158,  158,  158,  491,  488,  158,  158,
      158,  748,  525,  486,  158,  526,  493,  158,  158,  495,
      158,  748,  158,  158,  158,  158,  489,  158,  490,  158,

      492,  158,  158,  491,  158,  158,  158,  158,  496,  158,
      158,  158,  526,  493,  158,  748,  495,  158,  498,  494,
      499,  158,  158,  497,  158,  158,  158,  492,  158,  502,
      158,  158,  158,  158,  158,  496,  158,  158,  503,  158,
      527,  158,  501,  158,  158,  498,  494,  499,  500,  158,
      497,  158,  158,  158,  158,  158,  502,  158,  158,  158,
      158,  158,  158,  158,  158,  503,  158,  527,  158,  501,
      158,  158,  504,  158,  158,  500,  158,  505,  748,  506,
      158,  158,  158,  748,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  507,  158,  158,  748,  158,  504,

      158,  158,  528,  508,  505,  509,  506,  158,  510,  158,
      511,  158,  158,  158,  158,  158,  158,  748,  158,  158,
      158,  507,  514,  158,  513,  158,  158,  748,  158,  528,
      508,  748,  509,  158,  158,  510,  512,  511,  158,  158,
      158,  529,  530,  158,  158,  158,  158,  158,  158,  514,
      517,  513,  531,  158,  515,  158,  532,  516,  158,  533,
      158,  534,  535,  512,  158,  158,  536,  158,  529,  530,
      537,  158,  538,  158,  158,  158,  539,  517,  540,  531,
      541,  515,  542,  532,  516,  158,  533,  543,  534,  535,
      544,  158,  545,  536,  158,  546,  547,  537,  548,  538,

      549,  550,  551,  539,  552,  540,  553,  541,  554,  542,
      555,  556,  557,  558,  543,  559,  560,  544,  561,  545,
      562,  563,  546,  547,  564,  548,  565,  549,  550,  551,
      566,  552,  567,  553,  568,  554,  569,  555,  556,  557,
      558,  570,  559,  560,  158,  561,  575,  562,  563,  158,
      158,  564,  158,  565,  158,  624,  576,  566,  625,  567,
      158,  568,  571,  569,  573,  572,  158,  574,  570,  158,
      158,  158,  158,  575,  158,  158,  158,  158,  158,  158,
      158,  158,  624,  576,  626,  625,  577,  158,  578,  571,
      158,  573,  572,  158,  574,  158,  158,  158,  158,  158,

      158,  158,  158,  158,  580,  158,  158,  158,  158,  748,
      158,  626,  583,  577,  158,  578,  581,  158,  579,  748,
      158,  582,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  580,  158,  158,  158,  158,  584,  158,  627,  583,
      585,  158,  748,  581,  158,  579,  158,  158,  582,  158,
      158,  158,  158,  158,  158,  158,  158,  586,  588,  158,
      158,  158,  158,  584,  628,  627,  158,  585,  158,  587,
      158,  158,  158,  158,  158,  748,  158,  748,  629,  158,
      158,  158,  158,  590,  586,  588,  158,  158,  158,  158,
      158,  628,  158,  158,  589,  158,  587,  158,  158,  158,

      748,  158,  158,  158,  158,  629,  158,  158,  158,  158,
      590,  591,  748,  158,  592,  158,  593,  158,  158,  158,
      748,  589,  158,  158,  158,  158,  158,  594,  158,  158,
      158,  158,  158,  158,  748,  158,  748,  748,  591,  595,
      748,  592,  158,  593,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  594,  158,  158,  596,  158,  158,
      597,  158,  158,  598,  158,  748,  595,  158,  158,  158,
      748,  158,  630,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  596,  158,  158,  597,  158,  158,
      598,  158,  599,  600,  158,  158,  601,  158,  158,  630,

      158,  603,  158,  158,  158,  158,  158,  158,  158,  158,
      748,  602,  158,  158,  631,  748,  632,  158,  158,  599,
      600,  158,  158,  601,  158,  158,  158,  158,  603,  158,
      604,  748,  158,  158,  607,  605,  606,  158,  602,  158,
      158,  631,  158,  632,  158,  158,  158,  748,  158,  158,
      158,  158,  158,  158,  611,  158,  158,  604,  610,  158,
      158,  607,  605,  606,  158,  608,  609,  158,  612,  158,
      158,  158,  158,  158,  614,  158,  158,  158,  158,  158,
      158,  611,  158,  158,  613,  610,  158,  158,  158,  748,
      633,  748,  608,  609,  158,  612,  615,  158,  158,  158,

      158,  614,  158,  158,  158,  158,  158,  158,  616,  748,
      158,  613,  619,  158,  617,  158,  158,  633,  622,  748,
      618,  158,  748,  615,  158,  158,  158,  158,  621,  158,
      158,  158,  158,  158,  623,  616,  158,  158,  158,  619,
      158,  617,  634,  158,  620,  622,  158,  618,  635,  158,
      636,  158,  158,  158,  158,  621,  158,  158,  637,  638,
      158,  623,  639,  158,  640,  158,  641,  158,  642,  634,
      643,  620,  644,  158,  645,  635,  158,  636,  646,  647,
      648,  158,  649,  650,  651,  637,  638,  158,  652,  639,
      653,  640,  654,  641,  655,  642,  656,  643,  657,  644,

      658,  645,  659,  660,  661,  646,  647,  648,  158,  649,
      650,  651,  158,  158,  748,  652,  663,  653,  664,  654,
      748,  655,  700,  656,  668,  657,  701,  658,  158,  659,
      660,  661,  158,  158,  662,  158,  158,  158,  158,  158,
      158,  665,  158,  663,  158,  664,  666,  158,  702,  700,
      748,  668,  670,  701,  748,  158,  158,  158,  703,  158,
      158,  662,  158,  158,  158,  158,  667,  158,  665,  158,
      158,  158,  158,  666,  158,  702,  158,  669,  158,  670,
      158,  673,  158,  158,  158,  703,  704,  672,  705,  158,
      158,  158,  706,  667,  158,  671,  675,  158,  158,  158,

      158,  158,  158,  158,  669,  158,  674,  158,  673,  158,
      158,  158,  158,  704,  672,  705,  676,  158,  158,  706,
      158,  748,  671,  675,  158,  158,  158,  158,  158,  158,
      158,  677,  158,  674,  158,  158,  678,  158,  158,  158,
      158,  680,  748,  676,  158,  158,  158,  158,  679,  158,
      748,  158,  748,  158,  158,  158,  748,  158,  677,  158,
      158,  158,  158,  678,  681,  158,  158,  158,  680,  158,
      158,  158,  158,  158,  682,  679,  158,  683,  158,  158,
      158,  158,  158,  158,  684,  748,  158,  158,  158,  748,
      158,  681,  158,  158,  158,  748,  158,  158,  158,  158,

      158,  682,  687,  158,  683,  158,  158,  158,  158,  685,
      158,  684,  158,  158,  158,  158,  688,  158,  158,  748,
      158,  158,  158,  748,  158,  158,  158,  158,  707,  687,
      158,  686,  158,  689,  748,  158,  685,  158,  158,  158,
      748,  158,  158,  688,  158,  158,  158,  158,  692,  158,
      158,  158,  158,  691,  158,  707,  693,  158,  686,  158,
      689,  690,  158,  694,  158,  158,  158,  158,  748,  158,
      158,  158,  158,  158,  158,  692,  696,  158,  695,  158,
      691,  158,  158,  693,  158,  697,  158,  158,  690,  158,
      694,  698,  708,  158,  158,  158,  158,  158,  709,  158,

      748,  158,  158,  696,  158,  695,  158,  158,  710,  158,
      711,  158,  697,  158,  158,  158,  712,  713,  698,  708,
      714,  699,  158,  158,  158,  709,  715,  158,  716,  158,
      717,  158,  158,  158,  158,  710,  158,  711,  158,  748,
      719,  734,  158,  712,  713,  718,  158,  714,  699,  158,
      158,  158,  158,  715,  158,  716,  158,  717,  158,  158,
      158,  158,  158,  158,  722,  721,  158,  719,  734,  158,
      158,  748,  718,  158,  158,  720,  158,  158,  158,  158,
      158,  158,  158,  158,  723,  158,  158,  158,  158,  158,
      158,  722,  721,  158,  158,  158,  158,  158,  158,  158,

      158,  158,  720,  158,  158,  158,  158,  158,  158,  158,
      748,  723,  724,  158,  158,  158,  158,  158,  158,  158,
      726,  158,  158,  158,  725,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  748,  158,  158,  158,  724,
      158,  158,  158,  158,  727,  158,  158,  726,  158,  158,
      158,  725,  728,  158,  158,  158,  158,  158,  158,  158,
      729,  158,  158,  158,  158,  158,  158,  158,  730,  748,
      158,  727,  158,  158,  158,  158,  158,  731,  735,  728,
      158,  158,  158,  736,  158,  158,  158,  729,  158,  158,
      158,  748,  158,  158,  732,  730,  158,  158,  158,  158,

      158,  158,  158,  733,  731,  735,  158,  158,  158,  158,
      736,  737,  738,  158,  744,  158,  158,  158,  158,  158,
      158,  732,  158,  158,  158,  158,  158,  158,  158,  158,
      733,  748,  158,  158,  158,  158,  158,  158,  737,  738,
      158,  744,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  740,  158,
      158,  739,  158,  158,  158,  748,  158,  158,  748,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  748,  158,  158,  158,  740,  743,  158,  739,  158,
      745,  741,  158,  158,  158,  158,  158,  158,  158,  158,

      158,  158,  158,  158,  748,  158,  158,  158,  742,  158,
      158,  158,  158,  743,  158,  158,  158,  745,  741,  158,
      158,  158,  158,  158,  158,  158,  746,  158,  748,  158,
      158,  158,  747,  158,  158,  742,  158,  158,  158,  158,
      748,  158,  158,  158,  158,  748,  748,  158,  748,  748,
      748,  158,  748,  746,  748,  748,  748,  158,  158,  747,
      748,  158,  748,  158,  748,  748,  748,  748,  748,  748,
      748,  158,   74,  748,  748,   74,   75,  748,   75,   75,
      146,  748,  146,  146,  148,  748,  148,  148,  149,  748,
      149,  149,  158,  748,  158,  158,    5,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748
    } ;

static yyconst flex_int16_t yy_chk[3063] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,   13,   13,   14,   14,   16,   17,   16,   19,
       20,   18,   22,   19,   16,   20,   16,   25,   22,   26,
       28,   16,   19,   23,  751,   18,   37,   17,   18,   18,
      301,   23,  221,   16,   17,   16,   19,   20,   18,   22,
       19,   16,   20,   16,   25,   22,   26,   28,   16,   19,
       23,   21,   18,   37,   17,   18,   18,   21,   23,   24,
       21,   27,   29,   21,   31,   27,   24,   24,   40,   40,

       31,   27,   24,   38,   38,   33,   29,  153,   21,   33,
       41,   41,   29,  152,   21,  149,   24,   21,   27,   29,
       21,   31,   27,   24,   24,  148,   30,   31,   27,   24,
       38,   38,   33,   29,   30,   36,   33,   36,   30,   29,
       36,   30,   47,   47,   48,   48,   53,   73,   73,   79,
       53,   80,   80,   30,  147,  147,   54,   85,   78,   53,
       60,   30,   36,   86,   36,   30,   53,   36,   30,   34,
       54,   34,   56,   53,   34,   54,   54,   53,   89,   56,
       60,   34,   34,   54,   85,   56,   53,   60,   95,   75,
       86,   74,   56,   53,   94,   49,   34,   54,   34,   56,

       46,   34,   54,   54,   94,   89,   56,   60,   34,   34,
       35,   35,   56,   45,   35,   95,   66,   98,   57,   56,
       59,   94,   57,   99,   35,   44,   57,   35,  154,  154,
       59,   94,   42,   15,   12,   11,   66,   35,   35,   10,
       59,   35,   57,   66,   98,   57,    5,   59,   62,   57,
       99,   35,   62,   57,   35,   50,   50,   59,   50,   50,
       50,   50,   50,   66,   50,   50,   50,   59,   62,   57,
       50,   88,   50,   87,   88,   62,  101,    0,   50,   62,
       50,   87,  102,    0,   61,   50,    0,    0,   61,    0,
        0,    0,    0,    0,   61,   62,    0,   50,   88,   50,

       87,   88,    0,  101,   61,   50,   67,   50,   87,  102,
       67,   61,   50,   51,   51,   61,   51,   51,   51,   51,
       51,   61,   51,   51,   51,   65,   67,   90,   93,   51,
       93,   61,   65,   67,    0,    0,   71,   67,   65,   92,
       71,   90,    0,   97,   97,   65,   92,  103,    0,   51,
        0,    0,   65,   67,   90,   93,   51,   93,   72,   65,
       71,   72,   72,   71,    0,   65,   92,   71,   90,   96,
       97,   97,   65,   92,  103,   96,   51,   52,   72,  104,
      100,   52,   96,  105,  106,   72,  100,   71,   72,   72,
      108,   52,  110,  100,   52,   52,   96,  107,  112,    0,

      107,   52,   96,  113,   52,   72,  104,  100,   52,   96,
      105,  106,    0,  100,  114,    0,  111,  108,   52,  110,
      100,   52,   52,  115,  107,  112,  111,  107,   52,   55,
      113,  111,  111,   55,  116,  117,  116,  117,  118,   55,
      119,  114,   55,  111,  120,   55,  121,  122,  124,   55,
      115,    0,  125,  111,  126,  127,   55,  129,  111,  111,
       55,  116,  117,  116,  117,  118,   55,  119,  130,   55,
        0,  120,   55,  121,  122,  124,   55,   58,   58,  125,
      132,  126,  127,  128,  129,   58,   58,  133,  128,  134,
      135,   58,  131,  136,  137,  130,  138,   58,    0,  139,

      131,  141,    0,  140,   58,   58,  140,  132,  142,  143,
      128,  144,   58,   58,  133,  128,  134,  135,   58,  131,
      136,  137,    0,  138,   58,   63,  139,  131,  141,   63,
      140,  145,  223,  140,  158,  142,  143,    0,  144,   63,
      160,  159,  159,  225,    0,   63,    0,  226,  229,   63,
        0,    0,   63,  165,  158,  160,   63,    0,  145,  223,
      160,  158,  159,    0,  161,    0,   63,  160,  159,  159,
      225,  161,   63,  165,  226,  229,   63,   64,   64,  161,
      165,  158,  160,  230,  161,  231,   64,  160,    0,  159,
       64,  161,  162,   64,    0,  162,  162,   64,  161,  163,

      165,  163,    0,    0,   64,   64,  161,    0,    0,  232,
      230,  161,  231,   64,  164,  164,  162,   64,    0,  162,
       64,  163,  162,  162,   64,   68,  163,   68,  163,  164,
       68,    0,    0,    0,  164,  168,  232,   68,   68,  166,
        0,  164,  164,  162,    0,  168,  166,   68,  163,    0,
      169,  167,   68,  166,   68,  168,  164,   68,  167,  166,
      167,  164,  168,  233,   68,   68,  166,  169,    0,  234,
      169,  167,  168,  166,   68,   69,   69,  169,  167,   69,
      166,    0,  168,    0,  235,  167,  166,  167,    0,   69,
      233,    0,   69,  236,  169,  172,  234,  169,  167,   69,

        0,  183,   69,   69,  171,  172,   69,  238,  173,    0,
      173,  235,    0,    0,    0,  172,   69,  171,  171,   69,
      236,  183,  172,  239,  171,    0,   69,   70,  183,  240,
      173,  171,  172,  175,  238,  173,   70,  173,   70,  176,
      175,   70,  172,    0,  171,  171,    0,   70,  183,    0,
      239,  171,  176,  175,   70,    0,  240,  173,  182,  176,
      175,  177,    0,   70,    0,   70,  176,  175,   70,  241,
      178,  177,  182,  179,   70,  170,  170,  178,  182,  176,
      175,  177,  170,  179,    0,  182,  176,  242,  177,  170,
      178,  180,  188,  179,    0,  170,  241,  178,  177,  182,

      179,  180,  170,  170,  178,  182,  243,  181,  177,  170,
      179,  180,  188,    0,  242,  184,  170,  178,  180,  188,
      179,  181,  170,  174,  181,  174,  184,  181,  180,  174,
        0,    0,    0,  243,  181,  184,  174,  187,  180,  188,
      186,  187,  184,  244,    0,  174,    0,    0,  181,  186,
      174,  181,  174,  184,  181,  197,  174,  187,  189,  189,
      186,    0,  184,  174,  187,  245,    0,  186,  187,  246,
      244,  190,  174,  185,  185,  197,  186,  190,  189,  190,
      247,    0,  197,  185,  187,  189,  189,  186,  185,  185,
        0,  190,  245,  191,  185,  191,  246,  191,  190,  192,

      185,  185,  197,    0,  190,  189,  190,  247,  192,    0,
      185,    0,  193,  194,    0,  185,  185,  191,  190,  192,
      191,  185,  191,  195,  191,  248,  192,  193,  194,    0,
      195,    0,  193,  194,  250,  192,  196,  196,  199,  193,
      194,  198,  198,  195,  191,    0,  192,  200,    0,    0,
      195,  200,  248,  199,  193,  194,  196,  195,  199,  193,
      194,  250,  198,  196,  196,  199,    0,  251,  198,  198,
      195,  200,  201,  202,  200,  203,  201,  203,  200,    0,
      199,  204,  202,  196,  204,  199,  206,  202,    0,  198,
      205,  252,  201,  202,  251,  203,  206,  205,  200,  201,

      202,  204,  203,  201,  203,  205,  206,    0,  204,  202,
      205,  204,  209,  206,  202,  209,  207,  205,  252,  201,
      202,  208,  203,  206,  205,  208,    0,  210,  204,  207,
      211,    0,  205,  206,  210,  209,  207,  205,  211,  209,
      212,    0,  209,  207,    0,  208,    0,  210,  208,  253,
      211,  212,  208,  213,  210,    0,  207,  211,  215,  215,
      212,  210,  209,  207,  214,  211,  254,  212,  214,  213,
      218,  214,  208,  213,  210,    0,  253,  211,  212,  215,
      213,    0,  217,  255,  214,  215,  215,  212,  216,  217,
      218,  214,  216,  254,  256,  214,  213,  218,  214,  257,

      213,  258,  217,  219,  259,  260,  215,  262,  216,  217,
      255,  214,  261,  263,  265,  216,  217,  218,  219,  216,
      266,  256,  261,  219,  267,  268,  257,  269,  258,  217,
      219,  259,  260,  270,  262,  216,  271,  273,  274,  261,
      263,  265,  275,  276,  277,  219,  278,  266,  279,  261,
      219,  267,  268,  280,  269,  281,  282,  283,  285,  286,
      270,  287,  288,  271,  273,  274,  290,  292,  294,  275,
      276,  277,  293,  278,  293,  279,  295,  296,  297,  298,
      280,  299,  281,  282,  283,  285,  286,  302,  287,  288,
      303,  304,  305,  290,  292,  294,  307,    0,    0,  293,

      308,  293,  306,  295,  296,  297,  298,  302,  299,  306,
      303,  304,  305,  310,  302,  309,  307,  303,  304,  305,
      308,  311,  306,  307,  312,  309,  312,  308,  311,  306,
      380,  310,    0,  310,  302,  309,  306,  303,  304,  305,
      310,  311,  309,  307,  314,  313,  312,  308,  311,  306,
      315,  312,  309,  312,  315,  311,  316,  380,  310,  314,
      310,  313,  309,    0,  314,  313,    0,  317,  311,  319,
      316,  314,  313,  312,  315,  318,  316,  315,  320,  318,
      320,  315,    0,  316,  321,  381,  314,  317,  313,  319,
      325,  314,  313,  322,  317,  382,  319,  316,  323,  318,

      320,  315,  318,  316,  321,  320,  318,  320,  322,  323,
      325,  321,  381,  322,  317,  324,  319,  325,  323,  324,
      322,  327,  382,  328,  326,  323,  318,  320,  327,  329,
      383,  321,    0,    0,    0,  322,  323,  325,  326,  324,
      322,  327,  324,  328,  326,  323,  324,  331,  327,  329,
      328,  326,  330,  333,  331,  327,  329,  383,  334,  332,
      330,  334,  332,  384,    0,  326,  324,  331,  327,  333,
      328,  326,  330,  333,  331,  386,  329,  336,  334,  330,
      333,  331,  332,  337,    0,  334,  332,  330,  334,  332,
      384,  335,  336,  337,  331,  335,  333,  336,    0,  330,

      333,  338,  386,  337,  336,  334,  339,  340,    0,  332,
      337,  335,  387,    0,    0,  341,  342,  344,  335,  336,
      337,  338,  335,    0,  336,  341,  339,  340,  338,    0,
      337,  343,  342,  339,  340,  341,  342,  344,  335,  387,
      343,  345,  341,  342,  344,  346,  347,    0,  338,    0,
      347,  343,  341,  339,  340,  388,  345,    0,  343,  342,
      350,  345,  341,  342,  344,  346,  347,  343,  345,  348,
      348,  349,  346,  347,  352,  349,  350,  347,  343,  353,
      350,    0,  388,  345,  351,  389,  353,  350,  345,  355,
      348,    0,  346,  347,  352,  349,  348,  348,  349,  353,

      351,  352,  349,  350,  351,  354,  353,  350,  356,  355,
      358,  351,  389,  353,  357,    0,  355,  348,  358,  354,
      359,  352,  349,  357,  359,  354,  353,  351,  356,  362,
      358,  351,  354,  360,  357,  356,  355,  358,  363,  361,
      390,  357,  361,  364,  359,  358,  354,  359,  360,  362,
      357,  359,  354,  360,  365,  356,  362,  358,  363,  361,
      360,  357,  366,  364,  367,  363,  361,  390,  369,  361,
      364,  359,  365,  371,  365,  360,  362,  366,    0,  367,
      360,  365,  366,    0,  367,  363,  361,  368,  369,  366,
      364,  367,  370,  371,  368,  369,  372,    0,  373,  365,

      371,  365,  391,  370,  366,  372,  367,  368,  373,  366,
      373,  367,  370,  376,  368,  369,  372,    0,  373,  370,
      371,  368,  376,  372,  375,  373,  374,    0,  375,  391,
      370,    0,  372,  376,  368,  373,  374,  373,  377,  370,
      376,  392,  394,  372,  378,  373,  374,  379,  375,  376,
      379,  375,  395,  374,  377,  375,  397,  378,  377,  398,
      376,  399,  400,  374,  378,  377,  404,  379,  392,  394,
      405,  378,  407,  374,  379,  375,  408,  379,  409,  395,
      410,  377,  411,  397,  378,  377,  398,  412,  399,  400,
      413,  378,  415,  404,  379,  419,  421,  405,  422,  407,

      423,  425,  426,  408,  427,  409,  429,  410,  430,  411,
      431,  432,  433,  434,  412,  436,  437,  413,  438,  415,
      439,  440,  419,  421,  441,  422,  442,  423,  425,  426,
      443,  427,  444,  429,  445,  430,  446,  431,  432,  433,
      434,  447,  436,  437,  451,  438,  453,  439,  440,  449,
      454,  441,  450,  442,  452,  520,  455,  443,  521,  444,
      455,  445,  449,  446,  451,  450,  453,  452,  447,  449,
      454,  451,  450,  453,  452,  457,  449,  454,  456,  450,
      455,  452,  520,  455,  522,  521,  456,  455,  457,  449,
      459,  451,  450,  453,  452,  457,  449,  454,  456,  450,

      460,  452,  457,  458,  459,  456,  461,  455,  462,    0,
      459,  522,  463,  456,  463,  457,  460,  459,  458,    0,
      460,  461,  457,  458,  465,  456,  461,  460,  462,  466,
      458,  459,  464,  461,  463,  462,  464,  459,  523,  463,
      466,  463,    0,  460,  465,  458,  467,  460,  461,  466,
      458,  465,  464,  461,  468,  462,  466,  467,  469,  464,
      470,  463,  469,  464,  524,  523,  467,  466,  471,  468,
      472,  465,  474,  467,  468,    0,  466,    0,  525,  464,
      470,  468,  469,  474,  467,  469,  475,  470,  471,  469,
      472,  524,  474,  467,  473,  471,  468,  472,  473,  474,

        0,  468,  476,  478,  477,  525,  475,  470,  479,  469,
      474,  476,    0,  475,  477,  471,  478,  472,  473,  474,
        0,  473,  476,  478,  477,  473,  480,  479,  479,  476,
      478,  477,  483,  475,    0,  479,    0,    0,  476,  480,
        0,  477,  485,  478,  481,  473,  480,  482,  486,  476,
      478,  477,  483,  480,  479,  479,  484,  481,  487,  483,
      482,  489,  485,  484,  481,    0,  480,  482,  486,  485,
        0,  481,  526,  480,  482,  486,  484,  488,  487,  483,
      493,  489,  491,  484,  481,  487,  490,  482,  489,  485,
      484,  481,  488,  490,  482,  486,  491,  488,  492,  526,

      493,  494,  491,  484,  488,  487,  490,  493,  489,  491,
        0,  492,  497,  490,  528,    0,  529,  495,  492,  488,
      490,  494,  496,  491,  488,  492,  499,  493,  494,  491,
      495,    0,  497,  490,  499,  496,  498,  495,  492,  497,
      498,  528,  496,  529,  495,  492,  499,    0,  494,  496,
      502,  501,  500,  499,  503,  504,  503,  495,  502,  497,
      498,  499,  496,  498,  495,  500,  501,  498,  505,  496,
      502,  501,  500,  499,  507,  504,  503,  502,  501,  500,
      506,  503,  504,  503,  506,  502,  508,  498,  505,    0,
      530,    0,  500,  501,  507,  505,  508,  502,  501,  500,

      506,  507,  504,  503,  511,  510,  508,  506,  509,    0,
      509,  506,  512,  508,  510,  505,  512,  530,  515,    0,
      511,  507,    0,  508,  511,  510,  514,  506,  514,  513,
      509,  511,  510,  508,  516,  509,  512,  509,  515,  512,
      517,  510,  531,  512,  513,  515,  514,  511,  532,  513,
      533,  511,  510,  514,  516,  514,  513,  509,  534,  535,
      517,  516,  536,  512,  538,  515,  539,  517,  540,  531,
      543,  513,  544,  514,  545,  532,  513,  533,  549,  550,
      553,  516,  554,  555,  557,  534,  535,  517,  558,  536,
      559,  538,  560,  539,  561,  540,  562,  543,  563,  544,

      565,  545,  566,  567,  569,  549,  550,  553,  571,  554,
      555,  557,  572,  573,    0,  558,  574,  559,  575,  560,
        0,  561,  624,  562,  579,  563,  626,  565,  571,  566,
      567,  569,  572,  573,  573,  571,  574,  577,  575,  572,
      573,  576,  576,  574,  579,  575,  577,  580,  627,  624,
        0,  579,  582,  626,    0,  571,  578,  577,  628,  572,
      573,  573,  576,  574,  577,  575,  578,  580,  576,  576,
      581,  579,  582,  577,  580,  627,  578,  581,  584,  582,
      583,  585,  587,  578,  577,  628,  629,  584,  631,  576,
      581,  586,  634,  578,  580,  583,  587,  581,  584,  582,

      583,  585,  587,  578,  581,  584,  586,  583,  585,  587,
      590,  586,  588,  629,  584,  631,  588,  581,  586,  634,
      594,    0,  583,  587,  589,  584,  593,  583,  585,  587,
      590,  589,  588,  586,  591,  592,  591,  590,  586,  588,
      594,  593,    0,  588,  589,  595,  593,  594,  592,  596,
        0,  589,    0,  593,  591,  592,    0,  590,  589,  588,
      597,  591,  592,  591,  596,  595,  599,  594,  593,  596,
      598,  589,  595,  593,  597,  592,  596,  598,  600,  601,
      597,  591,  592,  604,  602,    0,  599,  597,  602,    0,
      598,  596,  595,  599,  603,    0,  596,  598,  600,  601,

      605,  597,  607,  604,  598,  600,  601,  597,  602,  603,
      604,  602,  608,  599,  603,  602,  608,  598,  606,    0,
      605,  603,  607,    0,  609,  600,  601,  605,  638,  607,
      604,  606,  608,  610,    0,  602,  603,  610,  606,  608,
        0,  603,  614,  608,  609,  606,  611,  605,  613,  607,
      615,  609,  613,  612,  612,  638,  614,  610,  606,  608,
      610,  611,  614,  615,  610,  606,  611,  617,    0,  614,
      615,  609,  613,  611,  612,  613,  618,  615,  616,  613,
      612,  612,  616,  614,  610,  619,  619,  617,  611,  614,
      615,  620,  641,  611,  617,  621,  618,  615,  644,  613,

        0,  612,  616,  618,  623,  616,  619,  622,  646,  616,
      648,  620,  619,  619,  617,  621,  650,  651,  620,  641,
      654,  622,  621,  618,  623,  644,  656,  622,  657,  616,
      662,  623,  663,  619,  622,  646,  664,  648,  620,    0,
      665,  706,  621,  650,  651,  664,  668,  654,  622,  669,
      662,  623,  663,  656,  622,  657,  664,  662,  667,  663,
      665,  666,  670,  664,  669,  667,  668,  665,  706,  669,
      671,    0,  664,  668,  673,  666,  669,  662,  667,  663,
      674,  666,  670,  664,  672,  667,  672,  665,  666,  670,
      671,  669,  667,  668,  673,  675,  669,  671,  677,  678,

      674,  673,  666,  676,  679,  667,  672,  674,  666,  670,
        0,  672,  676,  672,  680,  675,  681,  671,  677,  678,
      682,  673,  675,  676,  679,  677,  678,  674,  683,  685,
      676,  679,  686,  672,  680,    0,  681,  684,  687,  676,
      682,  680,  675,  681,  684,  677,  678,  682,  683,  685,
      676,  679,  686,  690,  689,  683,  685,  684,  687,  686,
      688,  680,  688,  681,  684,  687,  691,  682,  689,    0,
      692,  684,  693,  690,  689,  683,  685,  692,  709,  686,
      690,  689,  688,  712,  684,  687,  691,  688,  695,  688,
      692,    0,  693,  691,  694,  689,  696,  692,  694,  693,

      690,  689,  697,  695,  692,  709,  698,  699,  695,  688,
      712,  715,  716,  691,  735,  695,  696,  692,  694,  693,
      717,  694,  697,  696,  718,  694,  698,  699,  719,  697,
      695,    0,  720,  698,  699,  695,  721,  722,  715,  716,
      717,  735,  724,  696,  718,  694,  723,  717,  719,  697,
      725,  718,  720,  698,  699,  719,  721,  722,  726,  720,
      726,  723,  724,  721,  722,    0,  723,  717,    0,  724,
      725,  718,  727,  723,  728,  719,  729,  725,  730,  720,
      726,    0,  731,  721,  722,  726,  733,  726,  723,  724,
      737,  729,  727,  723,  728,  732,  729,  725,  730,  727,

      739,  728,  731,  729,    0,  730,  733,  726,  732,  731,
      741,  740,  742,  733,  743,  732,  746,  737,  729,  727,
      739,  728,  732,  729,  747,  730,  740,  739,    0,  731,
      741,  740,  742,  733,  743,  732,  746,  741,  740,  742,
        0,  743,  732,  746,  747,    0,    0,  739,    0,    0,
        0,  747,    0,  740,    0,    0,    0,  741,  740,  742,
        0,  743,    0,  746,    0,    0,    0,    0,    0,    0,
        0,  747,  749,    0,    0,  749,  750,    0,  750,  750,
      752,    0,  752,  752,  753,    0,  753,  753,  754,    0,
      754,  754,  755,    0,  755,  755,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "sqllib.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1392 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 50 "flex_lexer.l"


#line 1632 "flex_lexer.cpp"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 749 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 748 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 52 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 54 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 100:
#line 162 "flex_lexer.l"
case 101:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOAT;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INT;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2259 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 749 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 749 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 748);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 193 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[Error] SQL Lexer: %s\n",msg); return 0;
}
