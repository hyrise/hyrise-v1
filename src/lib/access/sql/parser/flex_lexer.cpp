#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 122
#define YY_END_OF_BUFFER 123
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[853] =
    {   0,
        0,    0,    2,    2,  123,  122,    4,  122,  115,  122,
      115,  115,  118,  115,  115,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,    2,    2,
        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    4,    0,    0,  121,    1,  117,  116,  118,
      113,  112,  114,  120,  120,  120,  120,  120,  103,  120,
      104,  120,  120,  120,  120,  120,  120,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      105,  120,  106,  107,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  108,  109,  110,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  111,  120,  120,  120,  120,  120,  120,
      120,  120,    2,    2,    2,    2,    2,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,  119,  116,   90,  120,   91,  120,  120,
       92,   93,  120,  120,  120,  120,  120,  120,  120,  120,
       94,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,   95,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,   96,  120,  120,   97,
      120,  120,  120,  120,  120,  120,  120,  120,   98,  120,
      120,   99,  120,  120,  120,  120,  120,  120,  120,  120,

      120,  120,  100,  120,  120,  120,  120,  101,  120,  120,
      120,  102,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,  120,  120,  120,  120,  120,   69,  120,  120,  120,
      120,  120,   70,  120,  120,  120,   71,  120,  120,  120,
       72,  120,  120,  120,  120,   73,   74,   75,  120,  120,
       76,  120,  120,  120,  120,  120,  120,  120,   77,  120,
       78,   79,   80,  120,   81,  120,  120,  120,  120,   82,
      120,  120,  120,  120,  120,   83,   84,  120,  120,  120,
      120,  120,  120,   85,  120,  120,  120,  120,   86,   87,
      120,  120,  120,  120,  120,  120,  120,   88,  120,  120,
       89,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   51,   52,  120,  120,  120,  120,  120,  120,  120,
       53,  120,  120,   54,  120,  120,  120,  120,  120,  120,
      120,  120,   55,  120,  120,  120,   56,   57,  120,  120,

      120,  120,   58,   59,   60,   61,  120,  120,  120,   62,
       63,  120,  120,  120,  120,   64,  120,  120,  120,  120,
       65,  120,  120,  120,   66,  120,  120,  120,   67,  120,
      120,   68,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,  120,   27,  120,  120,   28,  120,   29,

      120,   30,   31,  120,   32,   33,   34,   35,  120,   36,
       37,  120,   38,   39,  120,  120,   40,  120,  120,   41,
      120,  120,   42,  120,   43,   44,   45,  120,   46,  120,
      120,  120,   47,   48,   49,   50,  120,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   13,   14,   15,   16,   17,   18,  120,   19,   20,
       21,  120,   22,  120,  120,   23,  120,   24,   25,  120,

      120,  120,   26,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    9,  120,   10,  120,   11,
      120,  120,   12,    2,    2,    2,    2,    2,    2,    2,
        2,    6,  120,    7,    8,    2,    2,    2,    2,    5,
        2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,    5,   10,
       11,   12,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[860] =
    {   0,
        0,    0,   65,    0,  398, 3409,  129,    0, 3409,  390,
      388,  353,  125,  124,  346,  121,  121,  129,  175,  110,
      168,  119,  127,  181,  117,  133,  136,  134,  184,  217,
      180,    0,  192,  263,  306,  226,  228,  238,    0,  159,
      253,  345,    0,  342,  338,  335,  252,  252,  332,  363,
      421,  473,  525,  258,  573,  360,  291,  621,  297,  229,
      355,  413,  673,  721,  773,  341,  418,  823,  875,  923,
      423,  431,  269,  333,  323, 3409, 3409,  297,  289,  279,
     3409, 3409, 3409,    0,  138,  162,  279,  187,  227,  281,
        0,  301,  362,  339,  231,  250,  425,  415,  282,  326,

      376,  473,  386,  390,  415,  429,  427,  437,  458,  453,
        0,  465,  492,  472,  478,  465,  487,  484,  499,  476,
      496,  508,  511,  520,  534,  530,    0,  537,  522,  526,
      544,  537,  533,  541,  541,  569,  541,  542,  564,  564,
      568,  571,  572,  570,  569,  592,  592,  588,  590,  615,
      598,  590,    0,  294,  263,  247,    0,    0,  242,  239,
      292,    0,    0,    0,  627,  638,  652,  671,  681,  711,
      724,  706,  740,  756,  735,  778,  789,  971,  788,  839,
      817,  842, 1021,  856,  874,  908,  873,  909,  942,  913,
      897,  723,  963, 1070,  966,  976,  791,  967, 1000, 1030,

      984, 1029, 1051, 1060, 1054, 1095, 1016,  857, 1083, 1099,
     1100, 1108, 1125, 1123, 1134, 1148, 1162, 1166, 1160, 1171,
     1188, 1190, 1206, 1211, 1216, 1228, 1257, 1240, 1245, 1262,
     1270, 1259, 1278, 3409,  205,    0,  609,    0,  633,  627,
        0,    0,  629,  625,  668,  678,  671,  673,  696,  718,
        0,  779,  789, 1205,  799,  814,  804,  854,  854,  930,
      931,  951,  975,  988,    0, 1029, 1033, 1048, 1046, 1091,
     1134, 1142, 1164, 1202, 1223, 1268, 1301, 1257, 1271,    0,
     1266, 1285, 1290, 1300, 1306, 1301, 1297, 1298,    0, 1308,
     1303, 1304, 1319, 1322, 1335, 1315, 1319, 1336, 1318, 1331,

     1335, 1336,    0, 1319, 1324, 1329, 1340,    0, 1337, 1337,
     1353,    0, 1346, 1355, 1346, 1361, 1359, 1353, 1352, 1357,
     1360, 1373,    0,  199, 1378, 1381, 1386, 1387, 1402, 1390,
     1391, 1420, 1421, 1424, 1445, 1426, 1435, 1456, 1460, 1461,
     1464, 1489, 1475, 1498, 1486, 1499, 1500, 1510, 1532, 1515,
     1529, 1531, 1534, 1540, 1563, 1566, 1572, 1564, 1574, 1585,
     1582, 1608, 1568, 1603, 1606, 1617, 1620, 1622, 1614, 1651,
     1648, 1652, 1660, 1674, 1682, 1665, 1690, 1676, 1715, 1700,
     1704, 1705, 1714, 1743, 1744, 1730, 1759, 1754, 1772, 1756,
     1767, 1768, 1789, 1778, 1797, 1811, 1808, 1810, 1826, 1813,

     1822, 1823, 1851, 1852, 1880, 1847, 1865, 1864, 1886, 1897,
     1902, 1372, 1375, 1369, 1414, 1432,    0, 1482, 1638, 1649,
     1704, 1759,    0, 1811, 1851, 1881,    0, 1889, 1892, 1908,
        0, 1905, 1907, 1904, 1924,    0,    0,    0, 1925, 1914,
        0, 1917, 1920, 1918, 1915, 1922, 1923, 1937,    0, 1931,
        0,    0,    0, 1925,    0, 1934, 1951, 1940, 1942,    0,
     1958, 1959, 1947, 1951, 1961,    0,    0, 1974, 1963, 1959,
     1958, 1966, 1977,    0, 1976, 1975, 1980, 1974,    0, 1971,
     1990, 1980, 1974, 1996, 1978, 1992, 1995,    0, 1988, 2005,
        0, 2010, 2013, 2008, 2014, 2009, 2018, 2043, 2044, 2049,

     2058, 2067, 2048, 2072, 2082, 2084, 2083, 2118, 2113, 2121,
     2112, 2126, 2136, 2134, 2162, 2150, 2151, 2152, 2184, 2175,
     2167, 2192, 2190, 2203, 2205, 2220, 2221, 2236, 2188, 2246,
     2242, 2244, 2254, 2255, 2257, 2272, 2258, 2294, 2290, 2295,
     2298, 2300, 2311, 2313, 2328, 2312, 2329, 2350, 2344, 2354,
     2365, 2378, 2368, 2362, 2383, 2396, 2384, 2408, 2399, 2420,
     2424, 2432, 2437, 2442, 2458, 2454, 2450, 2466, 2472, 2475,
     2476,    0,    0, 2003, 2047, 2059, 2094, 2089, 2132, 2166,
        0, 2184, 2259,    0, 2292, 2307, 2387, 2390, 2387, 2392,
     2417, 2429,    0, 2458, 2469, 2475,    0,    0, 2476, 2494,

     2484, 2497,    0,    0,    0,    0, 2510, 2504, 2493,    0,
        0, 2510, 2498, 2512, 2510,    0, 2520, 2505, 2525, 2530,
     2513, 2515, 2514, 2534,    0, 2532, 2537, 2540,    0, 2528,
     2548,    0, 2545, 2546, 2558, 2548, 2550, 2561, 2574, 2576,
     2562, 2564, 2600, 2598, 2599, 2602, 2615, 2612, 2616, 2633,
     2638, 2637, 2654, 2650, 2667, 2673, 2656, 2672, 2682, 2690,
     2691, 2707, 2708, 2704, 2706, 2716, 2725, 2744, 2746, 2741,
     2730, 2758, 2759, 2762, 2760, 2770, 2784, 2796, 2795, 2800,
     2798, 2814, 2833, 2824, 2836, 2830, 2838, 2849, 2852, 2854,
     2864, 2886, 2867, 2604,    0, 2619, 2695, 2698, 2774,    0,

     2798,    0,    0, 2837,    0,    0,    0,    0, 2859,    0,
        0, 2850,    0,    0, 2875, 2889,    0, 2883, 2896,    0,
     2878, 2878,    0, 2902, 2888,    0,    0, 2896,    0, 2908,
     2911, 2893,    0,    0,    0,    0, 2903, 2912, 2918, 2940,
     2921, 2936, 2944, 2926, 2942, 2952, 2954, 2982, 2966, 2970,
     2985, 2988, 2994, 2996, 2998, 3000, 3004, 3006, 3036, 3019,
     3028, 3037, 3038, 3040, 3054, 3050, 3052, 3080, 3068, 3086,
     3090, 3091, 3092, 3108, 3120, 3114, 3103, 3122, 3124, 3126,
     3145,    0,    0,    0,    0,    0,    0, 2913,    0,    0,
        0, 2997,    0, 3049, 3094,    0, 3117,    0,    0, 3123,

     3140, 3154,    0, 3157, 3158, 3160, 3162, 3166, 3168, 3176,
     3170, 3174, 3199, 3200, 3202, 3211, 3208, 3210, 3233, 3212,
     3214, 3243, 3242, 3244, 3245,    0, 3225,    0, 3239,    0,
     3234, 3255,    0, 3268, 3282, 3274, 3285, 3276, 3284, 3299,
     3286,    0, 3259,    0,    0, 3287, 3308, 3316, 3318,    0,
     3320, 3409, 3384, 3388,  187, 3392, 3396, 3400, 3404
    } ;

static yyconst flex_int16_t yy_def[860] =
    {   0,
      852,    1,  852,    3,  852,  852,  852,  853,  852,  854,
      852,  852,  852,  852,  852,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  856,  856,
      852,  857,  856,  858,  856,  856,  856,  856,  856,  859,
      859,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,  852,  853,  854,  852,  852,  852,  852,  852,
      852,  852,  852,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,

      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  856,  856,  857,  858,  856,  856,  856,  856,
      856,  856,  856,  856,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,  852,  852,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,

      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  856,  856,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,

      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,  855,  855,  855,  855,  855,  855,  855,

      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,

      855,  855,  855,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,  855,  855,  855,  855,  855,
      855,  855,  855,   51,   51,   51,   51,   51,   51,   51,
       51,  855,  855,  855,  855,   51,   51,   51,   51,  855,
       51,    0,  852,  852,  852,  852,  852,  852,  852
    } ;

static yyconst flex_int16_t yy_nxt[3475] =
    {   0,
        6,    7,    7,    8,    9,   10,   11,   12,   13,   14,
        9,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   32,   32,   32,    6,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   32,   32,   32,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   43,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,

       66,   66,   66,   39,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   66,   66,   66,
       73,   73,   79,   80,   81,   82,   85,   90,   86,  109,
      101,   92,  107,  115,   87,  102,   88,  110,  108,  116,
      120,   89,  117,  236,  121,   93,  118,   91,   94,   95,
      154,   73,  119,   85,   90,   86,  109,  101,   92,  107,
      115,   87,  102,   88,  110,  108,  116,  120,   89,  117,
      236,  121,   93,  118,   91,   94,   95,   96,  103,  119,
       84,   97,  130,  237,  104,   98,  122,  105,  111,  240,

      106,   99,  241,  131,  100,  112,  113,  324,  133,  132,
      123,  114,  134,  235,   96,  103,  124,  125,   97,  130,
      237,  104,   98,  122,  105,  111,  240,  106,   99,  241,
      131,  100,  112,  113,  126,  133,  132,  123,  114,  134,
      149,  242,  127,  124,  125,  197,  128,  324,  150,  129,
      159,  146,  157,  147,   73,   73,  148,  151,  152,  160,
      161,  126,  162,  163,  251,  165,  323,  149,  242,  127,
       73,   73,  197,  128,  165,  150,  129,  135,  146,  136,
      147,  252,  137,  148,  151,  152,   79,   80,  182,  138,
      139,  251,  165,  183,  165,  154,   73,  235,  243,  160,

      161,  165,  238,  190,  135,   78,  136,  165,  252,  137,
      239,  191,  244,  165,  258,  182,  138,  139,  140,  141,
      183,  165,  142,  196,  245,  243,  143,  165,   76,  238,
      190,  246,  144,  165,  165,  145,  234,  239,  191,  244,
      165,  258,  164,  159,  158,  140,  141,  157,  153,  142,
      196,  245,  259,  143,  165,  249,   83,  165,  246,  144,
      165,   78,  145,  153,  153,  250,  153,  153,  153,  153,
      153,  198,  153,  153,  153,  199,  165,  165,  166,  259,
      167,  200,  249,  188,  165,  247,  168,  248,  169,  189,
      260,  165,  250,  170,   77,   76,  165,  852,  198,  852,

      852,  852,  199,  165,  165,  166,  852,  167,  200,  264,
      188,  852,  247,  168,  248,  169,  189,  260,  165,  265,
      170,  153,  153,  165,  153,  153,  153,  153,  153,  201,
      153,  153,  153,  202,  214,  230,  264,  171,  215,  165,
      852,  266,  253,  231,  256,  257,  265,  165,  254,  165,
      232,  233,  267,  268,  165,  255,  201,  172,  852,  165,
      202,  214,  230,  269,  171,  215,  165,  165,  266,  253,
      231,  256,  257,  852,  165,  254,  165,  232,  233,  267,
      268,  165,  255,  272,  172,  173,  165,  261,  270,  165,
      269,  271,  273,  262,  165,  852,  852,  278,  279,  174,

      263,  280,  175,  176,  281,  286,  282,  274,  283,  165,
      272,  284,  173,  285,  261,  270,  165,  275,  271,  273,
      262,  287,  276,  277,  278,  279,  174,  263,  280,  175,
      176,  281,  286,  282,  274,  283,  165,  177,  284,  288,
      285,  178,  289,  290,  275,  179,  291,  292,  287,  276,
      277,  180,  293,  294,  181,  295,  296,  297,  298,  300,
      301,  165,  852,  299,  177,  852,  288,  304,  178,  289,
      290,  305,  179,  291,  292,  852,  306,  307,  180,  293,
      294,  181,  295,  296,  297,  298,  300,  301,  165,  165,
      299,  308,  302,  184,  304,  309,  311,  312,  305,  185,

      303,  313,  186,  306,  307,  187,  310,  316,  317,  165,
      852,  852,  314,  318,  321,  315,  165,  852,  308,  302,
      184,  322,  309,  311,  312,  412,  185,  303,  313,  186,
      852,  319,  187,  310,  316,  317,  165,  165,  192,  314,
      318,  321,  315,  165,  320,  193,  194,  852,  322,  413,
      414,  195,  412,  325,  165,  415,  852,  165,  319,  416,
      852,  852,  852,  165,  165,  192,  852,  852,  165,  852,
      165,  320,  193,  194,  165,  852,  413,  414,  195,  852,
      325,  165,  415,  326,  165,  203,  416,  165,  165,  165,
      165,  417,  418,  329,  327,  165,  330,  165,  852,  204,

      852,  165,  328,  419,  420,  205,  206,  165,  421,  165,
      326,  852,  203,  852,  165,  165,  165,  165,  417,  418,
      329,  327,  165,  330,  165,  331,  204,  165,  852,  328,
      419,  420,  205,  206,  165,  421,  165,  165,  207,  165,
      165,  332,  165,  852,  165,  852,  208,  165,  422,  165,
      209,  338,  331,  210,  165,  333,  165,  165,  852,  165,
      165,  339,  852,  334,  165,  207,  165,  165,  332,  165,
      335,  165,  165,  208,  165,  422,  165,  209,  338,  336,
      210,  337,  333,  165,  165,  211,  165,  165,  339,  165,
      334,  852,  165,  852,  165,  423,  212,  335,  165,  165,

      852,  424,  213,  165,  165,  165,  336,  165,  337,  165,
      852,  340,  211,  427,  165,  852,  165,  345,  346,  165,
      341,  165,  423,  212,  165,  165,  852,  369,  424,  213,
      428,  165,  165,  165,  165,  429,  165,  216,  340,  217,
      427,  165,  218,  348,  345,  346,  852,  341,  852,  219,
      220,  165,  165,  165,  369,  165,  349,  428,  165,  165,
      165,  852,  429,  852,  216,  852,  217,  430,  852,  218,
      348,  347,  165,  165,  852,  165,  219,  220,  165,  353,
      165,  431,  165,  349,  852,  165,  165,  221,  222,  165,
      165,  223,  165,  165,  430,  224,  356,  852,  347,  165,

      165,  225,  165,  354,  226,  165,  353,  852,  431,  165,
      165,  165,  852,  165,  221,  222,  165,  165,  223,  165,
      165,  852,  224,  356,  165,  165,  852,  361,  225,  165,
      354,  226,  852,  165,  355,  357,  165,  165,  165,  165,
      165,  852,  432,  359,  165,  165,  360,  433,  227,  165,
      228,  165,  165,  229,  361,  852,  165,  852,  165,  165,
      165,  355,  357,  852,  852,  852,  165,  852,  358,  432,
      359,  165,  165,  360,  433,  227,  165,  228,  165,  165,
      229,  434,  165,  165,  370,  165,  165,  165,  342,  852,
      362,  367,  165,  852,  343,  358,  368,  852,  435,  165,

      165,  344,  165,  165,  436,  165,  165,  165,  434,  165,
      165,  370,  165,  375,  165,  342,  165,  362,  367,  165,
      165,  343,  371,  368,  372,  435,  165,  165,  344,  165,
      165,  436,  165,  381,  165,  350,  165,  165,  852,  165,
      375,  351,  373,  165,  374,  165,  165,  165,  352,  371,
      852,  372,  165,  437,  376,  852,  438,  165,  852,  165,
      381,  439,  350,  165,  165,  165,  165,  165,  351,  373,
      165,  374,  165,  165,  852,  352,  165,  379,  440,  165,
      437,  376,  377,  438,  165,  363,  165,  165,  439,  852,
      165,  378,  165,  165,  165,  364,  165,  165,  382,  165,

      365,  366,  852,  165,  379,  440,  165,  380,  852,  377,
      441,  165,  363,  165,  165,  165,  165,  165,  378,  165,
      385,  852,  364,  165,  165,  382,  165,  365,  366,  384,
      383,  165,  852,  165,  380,  165,  165,  441,  165,  165,
      852,  165,  165,  165,  165,  386,  165,  385,  387,  852,
      165,  165,  389,  388,  442,  852,  384,  383,  165,  165,
      852,  165,  165,  165,  165,  852,  165,  390,  165,  852,
      165,  165,  386,  443,  852,  387,  165,  165,  165,  389,
      388,  442,  165,  395,  165,  391,  165,  165,  165,  394,
      444,  165,  393,  392,  390,  852,  165,  165,  165,  852,

      443,  396,  165,  165,  165,  165,  165,  165,  852,  165,
      395,  165,  391,  397,  165,  852,  394,  444,  445,  393,
      392,  425,  165,  165,  165,  165,  165,  165,  396,  165,
      398,  165,  165,  165,  165,  400,  426,  852,  852,  446,
      397,  399,  165,  401,  165,  445,  852,  165,  425,  165,
      852,  165,  165,  165,  165,  405,  165,  398,  852,  165,
      402,  165,  400,  426,  165,  406,  446,  852,  399,  165,
      401,  165,  852,  165,  165,  410,  165,  403,  165,  165,
      404,  165,  405,  165,  447,  407,  408,  402,  165,  450,
      852,  165,  406,  165,  165,  165,  451,  452,  165,  409,

      165,  453,  410,  165,  403,  165,  165,  404,  165,  411,
      454,  447,  407,  408,  165,  455,  450,  448,  456,  457,
      165,  165,  165,  451,  452,  165,  409,  449,  453,  458,
      459,  460,  461,  165,  462,  463,  411,  454,  464,  852,
      467,  165,  455,  468,  448,  456,  457,  465,  469,  470,
      471,  472,  473,  474,  449,  475,  458,  459,  460,  461,
      476,  462,  463,  477,  478,  464,  466,  467,  479,  480,
      468,  481,  484,  485,  465,  469,  470,  471,  472,  473,
      474,  482,  475,  483,  486,  487,  488,  476,  489,  490,
      477,  478,  491,  466,  165,  479,  480,  492,  481,  484,

      485,  572,  165,  493,  573,  574,  165,  165,  482,  852,
      483,  486,  487,  488,  165,  489,  490,  165,  165,  491,
      852,  165,  165,  165,  492,  494,  165,  165,  572,  165,
      493,  573,  574,  165,  165,  852,  165,  165,  165,  852,
      165,  165,  165,  575,  165,  165,  495,  497,  576,  165,
      165,  165,  494,  165,  165,  496,  165,  165,  499,  498,
      165,  165,  165,  165,  165,  165,  500,  165,  501,  165,
      575,  165,  165,  495,  497,  576,  165,  165,  165,  852,
      503,  165,  496,  165,  165,  499,  498,  165,  165,  165,
      502,  505,  165,  500,  577,  501,  165,  165,  165,  165,

      165,  504,  508,  165,  165,  165,  506,  503,  165,  852,
      852,  165,  507,  510,  165,  165,  165,  502,  505,  165,
      852,  577,  165,  165,  165,  165,  165,  165,  504,  508,
      509,  513,  165,  506,  165,  165,  165,  511,  165,  507,
      510,  165,  165,  165,  512,  165,  165,  165,  165,  165,
      516,  165,  165,  165,  515,  852,  165,  509,  513,  514,
      852,  165,  165,  165,  511,  165,  852,  165,  165,  852,
      165,  512,  165,  165,  165,  165,  165,  516,  165,  165,
      165,  515,  165,  165,  525,  519,  514,  517,  165,  518,
      165,  852,  165,  521,  165,  165,  520,  165,  165,  165,

      165,  165,  165,  165,  165,  522,  165,  165,  165,  165,
      165,  525,  519,  523,  517,  165,  518,  165,  165,  526,
      521,  165,  527,  520,  165,  165,  165,  165,  165,  165,
      165,  165,  522,  528,  524,  165,  165,  165,  165,  165,
      523,  852,  165,  529,  165,  165,  526,  531,  165,  527,
      165,  165,  530,  165,  852,  852,  165,  165,  165,  852,
      528,  524,  578,  165,  533,  165,  165,  165,  165,  165,
      529,  165,  534,  852,  531,  535,  165,  165,  579,  530,
      165,  165,  532,  165,  165,  165,  536,  165,  165,  578,
      165,  533,  165,  852,  165,  165,  165,  538,  165,  534,

      537,  165,  535,  165,  852,  579,  165,  852,  165,  532,
      165,  165,  165,  536,  165,  165,  165,  165,  165,  165,
      165,  543,  539,  165,  538,  165,  165,  537,  165,  541,
      544,  165,  852,  165,  542,  580,  165,  165,  540,  165,
      165,  165,  852,  165,  852,  165,  165,  165,  543,  539,
      165,  165,  852,  165,  548,  545,  541,  544,  165,  165,
      165,  542,  580,  165,  852,  540,  165,  165,  165,  547,
      165,  549,  552,  165,  546,  165,  852,  165,  165,  165,
      165,  548,  545,  553,  165,  550,  165,  165,  165,  581,
      165,  551,  165,  165,  165,  165,  547,  165,  549,  552,

      852,  546,  165,  165,  165,  165,  165,  165,  165,  555,
      553,  165,  550,  165,  165,  165,  581,  165,  551,  165,
      852,  165,  165,  554,  165,  165,  165,  165,  556,  560,
      165,  165,  165,  165,  557,  165,  555,  558,  165,  165,
      165,  165,  165,  582,  165,  852,  165,  165,  561,  165,
      554,  165,  165,  165,  165,  556,  560,  559,  165,  165,
      165,  557,  165,  165,  558,  165,  165,  165,  165,  165,
      582,  165,  566,  165,  165,  561,  165,  562,  564,  563,
      165,  165,  583,  165,  559,  165,  165,  165,  165,  165,
      165,  852,  565,  584,  165,  165,  165,  567,  568,  566,

      165,  165,  165,  585,  562,  564,  563,  165,  165,  583,
      165,  852,  586,  165,  165,  165,  165,  569,  165,  565,
      584,  571,  165,  165,  567,  568,  570,  165,  165,  165,
      585,  587,  588,  165,  589,  590,  591,  592,  165,  586,
      165,  593,  594,  165,  569,  165,  595,  596,  571,  165,
      597,  598,  599,  570,  602,  600,  603,  604,  587,  588,
      165,  589,  590,  591,  592,  165,  601,  605,  593,  594,
      606,  607,  608,  595,  596,  609,  610,  597,  598,  599,
      611,  602,  600,  603,  604,  612,  613,  614,  615,  616,
      617,  618,  619,  601,  605,  620,  621,  606,  607,  608,

      622,  623,  609,  610,  624,  625,  626,  611,  627,  628,
      629,  630,  612,  613,  614,  615,  616,  617,  618,  619,
      631,  632,  620,  621,  165,  637,  165,  622,  623,  165,
      165,  624,  625,  626,  165,  627,  628,  629,  630,  633,
      694,  852,  634,  636,  635,  165,  165,  631,  632,  165,
      165,  165,  637,  165,  165,  638,  165,  165,  852,  165,
      165,  165,  852,  695,  165,  165,  633,  694,  639,  634,
      636,  635,  165,  165,  165,  696,  165,  165,  640,  165,
      165,  165,  638,  165,  165,  165,  165,  165,  165,  641,
      695,  165,  165,  852,  165,  639,  645,  642,  165,  165,

      165,  165,  696,  165,  643,  640,  165,  165,  165,  697,
      165,  165,  165,  644,  698,  165,  641,  852,  165,  165,
      165,  165,  852,  645,  642,  165,  165,  165,  165,  165,
      165,  643,  646,  647,  165,  165,  697,  165,  852,  852,
      644,  698,  165,  852,  648,  165,  165,  165,  165,  165,
      165,  852,  165,  649,  165,  165,  165,  165,  699,  646,
      647,  165,  165,  650,  165,  651,  165,  165,  165,  165,
      165,  648,  165,  852,  652,  165,  165,  165,  165,  165,
      649,  165,  700,  165,  165,  699,  165,  165,  165,  165,
      650,  165,  651,  165,  165,  165,  653,  165,  165,  165,

      165,  652,  654,  165,  165,  165,  165,  701,  165,  700,
      165,  165,  852,  165,  165,  165,  656,  655,  165,  165,
      165,  165,  852,  653,  165,  165,  165,  165,  165,  654,
      165,  165,  657,  165,  701,  165,  165,  165,  165,  165,
      658,  165,  852,  656,  655,  852,  165,  165,  165,  659,
      660,  165,  165,  165,  661,  165,  165,  165,  165,  657,
      165,  852,  165,  165,  165,  662,  165,  658,  165,  663,
      165,  165,  165,  165,  666,  702,  659,  660,  165,  165,
      165,  661,  165,  165,  165,  165,  664,  165,  165,  165,
      165,  165,  662,  165,  165,  665,  663,  165,  165,  165,

      165,  666,  702,  852,  852,  165,  165,  165,  165,  165,
      165,  165,  669,  664,  165,  165,  670,  165,  165,  668,
      165,  165,  665,  703,  667,  852,  165,  165,  165,  165,
      165,  165,  704,  165,  165,  165,  165,  165,  165,  669,
      671,  165,  672,  670,  165,  165,  668,  165,  165,  165,
      703,  667,  673,  165,  165,  165,  165,  165,  165,  704,
      165,  165,  674,  165,  165,  165,  165,  671,  675,  672,
      165,  165,  165,  852,  165,  165,  165,  852,  165,  673,
      165,  165,  679,  676,  165,  852,  165,  165,  852,  674,
      165,  165,  165,  165,  165,  675,  677,  165,  165,  680,

      682,  165,  678,  705,  165,  165,  706,  165,  165,  679,
      676,  165,  165,  165,  165,  165,  681,  165,  707,  165,
      165,  165,  708,  677,  165,  165,  680,  682,  165,  678,
      705,  165,  165,  706,  683,  165,  165,  709,  685,  165,
      165,  165,  165,  681,  165,  707,  165,  165,  165,  708,
      684,  165,  710,  165,  688,  852,  165,  686,  165,  165,
      165,  683,  165,  165,  709,  685,  691,  165,  165,  687,
      165,  165,  690,  165,  165,  165,  711,  684,  165,  710,
      165,  688,  165,  165,  686,  165,  165,  165,  165,  689,
      165,  693,  165,  691,  165,  165,  687,  165,  712,  690,

      165,  165,  165,  711,  692,  165,  713,  714,  165,  165,
      715,  165,  165,  165,  716,  165,  689,  165,  693,  165,
      717,  165,  718,  719,  720,  712,  721,  722,  723,  165,
      724,  692,  725,  713,  714,  165,  726,  715,  165,  165,
      727,  716,  728,  729,  730,  731,  732,  717,  733,  718,
      719,  720,  734,  721,  722,  723,  735,  724,  736,  725,
      737,  165,  165,  726,  739,  852,  740,  727,  852,  728,
      729,  730,  731,  732,  165,  733,  741,  165,  744,  734,
      165,  165,  165,  735,  165,  736,  165,  737,  165,  165,
      165,  739,  165,  740,  165,  738,  852,  165,  165,  742,

      165,  165,  743,  741,  165,  744,  852,  165,  165,  165,
      165,  165,  165,  165,  746,  165,  165,  165,  165,  165,
      782,  165,  738,  745,  165,  165,  742,  165,  749,  743,
      852,  165,  750,  747,  165,  165,  165,  165,  165,  165,
      748,  746,  165,  165,  783,  165,  852,  782,  165,  165,
      745,  165,  165,  165,  165,  749,  852,  753,  165,  750,
      747,  165,  165,  165,  751,  165,  165,  748,  752,  165,
      165,  783,  165,  165,  165,  165,  165,  754,  165,  165,
      165,  165,  852,  165,  753,  755,  165,  757,  165,  165,
      165,  751,  165,  165,  852,  752,  165,  165,  165,  165,

      165,  165,  756,  165,  754,  852,  165,  759,  165,  165,
      165,  784,  755,  165,  757,  165,  165,  165,  165,  165,
      165,  758,  165,  165,  165,  165,  165,  165,  785,  756,
      165,  761,  165,  165,  759,  165,  165,  760,  784,  852,
      165,  165,  165,  165,  165,  165,  165,  165,  758,  165,
      165,  165,  165,  165,  165,  785,  762,  165,  761,  165,
      165,  165,  165,  852,  760,  763,  165,  165,  165,  165,
      165,  165,  764,  165,  165,  765,  767,  165,  165,  165,
      165,  852,  165,  762,  165,  852,  165,  165,  165,  165,
      768,  766,  763,  165,  165,  165,  165,  786,  165,  764,

      165,  165,  765,  767,  165,  165,  165,  165,  769,  165,
      772,  165,  165,  165,  165,  771,  165,  768,  766,  852,
      165,  165,  165,  165,  786,  165,  770,  165,  852,  787,
      165,  165,  165,  165,  165,  769,  165,  772,  165,  165,
      165,  165,  771,  165,  773,  852,  165,  165,  776,  165,
      165,  788,  165,  770,  777,  775,  787,  165,  165,  165,
      165,  165,  774,  165,  778,  165,  165,  165,  779,  165,
      165,  773,  165,  165,  165,  776,  165,  165,  788,  165,
      165,  777,  775,  165,  789,  165,  790,  165,  165,  774,
      165,  778,  165,  165,  780,  779,  165,  165,  781,  165,

      165,  165,  165,  165,  791,  792,  793,  165,  794,  795,
      165,  789,  165,  790,  796,  165,  797,  165,  798,  799,
      800,  780,  165,  801,  802,  781,  803,  165,  804,  165,
      165,  791,  792,  793,  165,  794,  795,  806,  852,  852,
      852,  796,  165,  797,  826,  798,  799,  800,  165,  165,
      801,  802,  165,  803,  165,  804,  165,  165,  165,  852,
      165,  165,  165,  852,  806,  805,  807,  808,  165,  165,
      165,  826,  165,  809,  852,  165,  165,  852,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  852,  805,  807,  808,  165,  810,  165,  165,  165,

      809,  165,  165,  165,  165,  165,  165,  165,  852,  165,
      165,  827,  165,  165,  165,  165,  165,  165,  165,  811,
      165,  165,  165,  810,  165,  165,  852,  852,  165,  165,
      165,  165,  165,  165,  165,  814,  812,  165,  827,  165,
      165,  165,  165,  165,  165,  165,  811,  165,  165,  165,
      816,  165,  165,  165,  165,  165,  165,  165,  852,  165,
      815,  165,  814,  812,  165,  813,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  852,  165,  816,  828,  165,
      165,  165,  165,  165,  165,  817,  818,  815,  165,  852,
      165,  165,  813,  165,  819,  165,  165,  165,  820,  165,

      165,  165,  165,  165,  165,  828,  165,  165,  165,  852,
      829,  165,  817,  818,  821,  165,  165,  165,  852,  165,
      822,  819,  165,  165,  165,  820,  165,  165,  165,  165,
      165,  165,  823,  165,  165,  165,  165,  829,  165,  165,
      165,  821,  165,  165,  165,  824,  165,  822,  830,  165,
      165,  165,  831,  165,  165,  165,  165,  165,  165,  823,
      165,  165,  165,  165,  832,  165,  165,  165,  825,  165,
      833,  165,  824,  165,  165,  830,  165,  165,  165,  831,
      852,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  832,  165,  165,  165,  825,  165,  833,  165,  852,

      165,  165,  165,  165,  165,  165,  165,  834,  165,  165,
      165,  165,  165,  165,  835,  165,  165,  165,  165,  165,
      165,  165,  852,  165,  837,  165,  165,  165,  165,  165,
      165,  165,  852,  165,  834,  165,  165,  165,  165,  165,
      836,  835,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  837,  852,  165,  165,  165,  842,  165,  165,  165,
      841,  165,  165,  165,  838,  165,  840,  836,  843,  165,
      844,  165,  839,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  845,  842,  165,  165,  165,  841,  165,  850,
      165,  838,  165,  840,  852,  843,  165,  844,  165,  839,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  845,
      165,  165,  165,  846,  847,  165,  850,  165,  165,  165,
      848,  165,  165,  165,  165,  165,  849,  165,  165,  165,
      165,  165,  165,  852,  165,  165,  165,  165,  851,  165,
      846,  847,  165,  852,  165,  165,  852,  848,  165,  165,
      165,  165,  165,  849,  165,  852,  165,  852,  852,  165,
      852,  165,  165,  165,  852,  851,  852,  852,  852,  852,
      852,  165,  852,  852,  852,  852,  852,  852,  852,  165,
      852,  165,  852,  165,   74,  852,  852,   74,   75,  852,
       75,   75,  153,  852,  153,  153,  155,  852,  155,  155,

      156,  852,  156,  156,  165,  852,  165,  165,    5,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852
    } ;

static yyconst flex_int16_t yy_chk[3475] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,   13,   13,   14,   14,   16,   17,   16,   23,
       20,   18,   22,   25,   16,   20,   16,   23,   22,   26,
       28,   16,   27,   85,   28,   18,   27,   17,   18,   18,
       40,   40,   27,   16,   17,   16,   23,   20,   18,   22,
       25,   16,   20,   16,   23,   22,   26,   28,   16,   27,
       85,   28,   18,   27,   17,   18,   18,   19,   21,   27,
      855,   19,   31,   86,   21,   19,   29,   21,   24,   88,

       21,   19,   88,   31,   19,   24,   24,  324,   33,   31,
       29,   24,   33,  235,   19,   21,   29,   29,   19,   31,
       86,   21,   19,   29,   21,   24,   88,   21,   19,   88,
       31,   19,   24,   24,   30,   33,   31,   29,   24,   33,
       37,   89,   30,   29,   29,   60,   30,  160,   37,   30,
      159,   36,  156,   36,   41,   41,   36,   38,   38,   47,
       47,   30,   48,   48,   95,   60,  155,   37,   89,   30,
       73,   73,   60,   30,   54,   37,   30,   34,   36,   34,
       36,   96,   34,   36,   38,   38,   80,   80,   54,   34,
       34,   95,   60,   54,   54,  154,  154,   79,   90,  161,

      161,   54,   87,   57,   34,   78,   34,   57,   96,   34,
       87,   57,   90,   59,   99,   54,   34,   34,   35,   35,
       54,   54,   35,   59,   92,   90,   35,   57,   75,   87,
       57,   92,   35,   59,   57,   35,   74,   87,   57,   90,
       59,   99,   49,   46,   45,   35,   35,   44,   42,   35,
       59,   92,  100,   35,   57,   94,   15,   66,   92,   35,
       59,   12,   35,   50,   50,   94,   50,   50,   50,   50,
       50,   61,   50,   50,   50,   61,   56,   66,   50,  100,
       50,   61,   94,   56,   66,   93,   50,   93,   50,   56,
      101,   61,   94,   50,   11,   10,   56,    5,   61,    0,

        0,    0,   61,   56,   66,   50,    0,   50,   61,  103,
       56,    0,   93,   50,   93,   50,   56,  101,   61,  104,
       50,   51,   51,   56,   51,   51,   51,   51,   51,   62,
       51,   51,   51,   62,   67,   71,  103,   51,   67,   71,
        0,  105,   97,   71,   98,   98,  104,   72,   97,   62,
       72,   72,  106,  107,   67,   97,   62,   51,    0,   71,
       62,   67,   71,  108,   51,   67,   71,   72,  105,   97,
       71,   98,   98,    0,   72,   97,   62,   72,   72,  106,
      107,   67,   97,  110,   51,   52,   71,  102,  109,   52,
      108,  109,  112,  102,   72,    0,    0,  114,  115,   52,

      102,  116,   52,   52,  117,  120,  118,  113,  118,   52,
      110,  119,   52,  119,  102,  109,   52,  113,  109,  112,
      102,  121,  113,  113,  114,  115,   52,  102,  116,   52,
       52,  117,  120,  118,  113,  118,   52,   53,  119,  122,
      119,   53,  123,  124,  113,   53,  125,  126,  121,  113,
      113,   53,  128,  129,   53,  130,  131,  132,  133,  134,
      135,   53,    0,  133,   53,    0,  122,  137,   53,  123,
      124,  138,   53,  125,  126,    0,  139,  140,   53,  128,
      129,   53,  130,  131,  132,  133,  134,  135,   53,   55,
      133,  141,  136,   55,  137,  142,  143,  144,  138,   55,

      136,  145,   55,  139,  140,   55,  142,  147,  148,   55,
        0,    0,  146,  149,  151,  146,   55,    0,  141,  136,
       55,  152,  142,  143,  144,  237,   55,  136,  145,   55,
        0,  150,   55,  142,  147,  148,   55,   58,   58,  146,
      149,  151,  146,  165,  150,   58,   58,    0,  152,  239,
      240,   58,  237,  166,  166,  243,    0,   58,  150,  244,
        0,    0,    0,  165,   58,   58,    0,    0,  167,    0,
      165,  150,   58,   58,  166,    0,  239,  240,   58,    0,
      166,  166,  243,  167,   58,   63,  244,  168,  167,   63,
      165,  245,  246,  169,  168,  167,  169,  169,    0,   63,

        0,  166,  168,  247,  248,   63,   63,  168,  249,   63,
      167,    0,   63,    0,  168,  167,   63,  169,  245,  246,
      169,  168,  172,  169,  169,  170,   63,  170,    0,  168,
      247,  248,   63,   63,  168,  249,   63,   64,   64,  192,
      171,  171,  172,    0,  169,    0,   64,  170,  250,  172,
       64,  175,  170,   64,  170,  171,  173,   64,    0,  192,
      171,  175,    0,  173,   64,   64,  192,  171,  171,  172,
      173,  175,  174,   64,  170,  250,  173,   64,  175,  174,
       64,  174,  171,  173,   64,   65,  192,  171,  175,   65,
      173,    0,  174,    0,  176,  252,   65,  173,  175,  174,

        0,  253,   65,  173,  179,  177,  174,  197,  174,   65,
        0,  176,   65,  255,  176,    0,   65,  179,  179,  174,
      177,  176,  252,   65,  179,  177,    0,  197,  253,   65,
      256,  179,  177,  181,  197,  257,   65,   68,  176,   68,
      255,  176,   68,  181,  179,  179,    0,  177,    0,   68,
       68,  179,  177,  181,  197,  180,  182,  256,  182,   68,
      181,    0,  257,    0,   68,    0,   68,  258,    0,   68,
      181,  180,  184,  208,    0,  180,   68,   68,  182,  184,
      181,  259,  180,  182,    0,  182,   68,   69,   69,  187,
      185,   69,  184,  208,  258,   69,  187,    0,  180,  184,

      208,   69,  180,  185,   69,  182,  184,    0,  259,  187,
      185,   69,    0,  191,   69,   69,  187,  185,   69,  184,
      208,    0,   69,  187,  186,  188,    0,  191,   69,  190,
      185,   69,    0,  191,  186,  188,  187,  185,   69,   70,
      191,    0,  260,  190,  186,  188,  190,  261,   70,  190,
       70,  186,  188,   70,  191,    0,  190,    0,  189,   70,
      191,  186,  188,    0,    0,    0,   70,    0,  189,  260,
      190,  186,  188,  190,  261,   70,  190,   70,  189,  193,
       70,  262,  195,  198,  198,  189,   70,  178,  178,    0,
      193,  195,  196,    0,  178,  189,  196,    0,  263,  193,

      201,  178,  195,  198,  264,  189,  193,  178,  262,  195,
      198,  198,  196,  201,  178,  178,  199,  193,  195,  196,
      201,  178,  199,  196,  199,  263,  193,  201,  178,  195,
      198,  264,  207,  207,  178,  183,  199,  183,    0,  196,
      201,  183,  200,  199,  200,  202,  200,  201,  183,  199,
        0,  199,  207,  266,  202,    0,  267,  183,    0,  207,
      207,  268,  183,  199,  183,  202,  200,  203,  183,  200,
      205,  200,  202,  200,    0,  183,  204,  205,  269,  207,
      266,  202,  203,  267,  183,  194,  194,  203,  268,    0,
      205,  204,  202,  200,  203,  194,  204,  205,  209,  209,

      194,  194,    0,  204,  205,  269,  194,  206,    0,  203,
      270,  206,  194,  194,  203,  210,  211,  205,  204,  209,
      212,    0,  194,  204,  212,  209,  209,  194,  194,  211,
      210,  206,    0,  194,  206,  210,  211,  270,  206,  214,
        0,  213,  210,  211,  212,  213,  209,  212,  214,    0,
      215,  212,  215,  214,  271,    0,  211,  210,  206,  214,
        0,  213,  210,  211,  216,    0,  214,  216,  213,    0,
      215,  212,  213,  272,    0,  214,  219,  215,  217,  215,
      214,  271,  218,  220,  216,  217,  214,  220,  213,  219,
      273,  216,  218,  217,  216,    0,  219,  215,  217,    0,

      272,  221,  218,  219,  221,  217,  222,  220,    0,  218,
      220,  216,  217,  222,  220,    0,  219,  273,  274,  218,
      217,  254,  223,  219,  221,  217,  222,  224,  221,  218,
      223,  221,  225,  222,  220,  224,  254,    0,    0,  275,
      222,  223,  223,  225,  226,  274,    0,  224,  254,  223,
        0,  221,  225,  222,  224,  228,  228,  223,    0,  225,
      226,  229,  224,  254,  226,  229,  275,    0,  223,  223,
      225,  226,    0,  227,  224,  232,  228,  227,  230,  225,
      227,  229,  228,  228,  276,  230,  231,  226,  229,  278,
        0,  226,  229,  227,  233,  232,  279,  281,  230,  231,

      227,  282,  232,  228,  227,  230,  231,  227,  229,  233,
      283,  276,  230,  231,  233,  284,  278,  277,  285,  286,
      227,  233,  232,  279,  281,  230,  231,  277,  282,  287,
      288,  290,  291,  231,  292,  293,  233,  283,  294,    0,
      296,  233,  284,  297,  277,  285,  286,  295,  298,  299,
      300,  301,  302,  304,  277,  305,  287,  288,  290,  291,
      306,  292,  293,  307,  309,  294,  295,  296,  310,  311,
      297,  313,  315,  316,  295,  298,  299,  300,  301,  302,
      304,  314,  305,  314,  317,  318,  319,  306,  320,  321,
      307,  309,  322,  295,  325,  310,  311,  326,  313,  315,

      316,  412,  327,  328,  413,  414,  330,  331,  314,    0,
      314,  317,  318,  319,  325,  320,  321,  326,  329,  322,
        0,  325,  327,  328,  326,  329,  330,  331,  412,  327,
      328,  413,  414,  330,  331,    0,  332,  333,  329,    0,
      334,  325,  336,  415,  326,  329,  332,  334,  416,  327,
      328,  337,  329,  330,  331,  333,  332,  333,  336,  335,
      334,  335,  336,  332,  333,  329,  337,  334,  338,  336,
      415,  337,  338,  332,  334,  416,  339,  340,  337,    0,
      341,  335,  333,  332,  333,  336,  335,  334,  335,  336,
      339,  343,  338,  337,  418,  338,  339,  340,  337,  338,

      341,  342,  345,  339,  340,  342,  343,  341,  335,    0,
        0,  343,  344,  347,  344,  346,  347,  339,  343,  338,
        0,  418,  345,  339,  340,  342,  348,  341,  342,  345,
      346,  350,  342,  343,  344,  346,  347,  348,  343,  344,
      347,  344,  346,  347,  349,  351,  348,  352,  349,  345,
      353,  350,  342,  348,  352,    0,  354,  346,  350,  351,
        0,  344,  346,  347,  348,  351,    0,  352,  349,    0,
      353,  349,  351,  348,  352,  349,  354,  353,  350,  355,
      358,  352,  356,  354,  363,  357,  351,  355,  357,  356,
      359,    0,  351,  359,  352,  349,  358,  353,  361,  355,

      358,  360,  356,  354,  363,  360,  355,  358,  357,  356,
      359,  363,  357,  361,  355,  357,  356,  359,  361,  364,
      359,  360,  365,  358,  362,  361,  355,  358,  360,  356,
      369,  363,  360,  366,  362,  357,  367,  359,  368,  364,
      361,    0,  365,  366,  362,  361,  364,  368,  360,  365,
      369,  362,  367,  366,    0,    0,  367,  369,  368,    0,
      366,  362,  419,  367,  371,  368,  364,  370,  372,  365,
      366,  362,  372,    0,  368,  373,  373,  369,  420,  367,
      366,  376,  370,  367,  371,  368,  374,  370,  372,  419,
      374,  371,  378,    0,  370,  372,  373,  376,  375,  372,

      375,  376,  373,  373,    0,  420,  377,    0,  376,  370,
      374,  371,  378,  374,  370,  372,  380,  374,  375,  378,
      381,  382,  377,  373,  376,  375,  377,  375,  376,  380,
      383,  379,    0,  377,  381,  421,  380,  374,  379,  378,
      381,  382,    0,  380,    0,  375,  386,  381,  382,  377,
      383,  379,    0,  377,  386,  384,  380,  383,  379,  384,
      385,  381,  421,  380,    0,  379,  386,  381,  382,  385,
      388,  387,  390,  386,  384,  387,    0,  383,  379,  384,
      385,  386,  384,  391,  392,  388,  384,  385,  389,  422,
      388,  389,  390,  386,  394,  387,  385,  388,  387,  390,

        0,  384,  387,  391,  392,  393,  384,  385,  389,  394,
      391,  392,  388,  395,  394,  389,  422,  388,  389,  390,
        0,  394,  387,  393,  397,  393,  398,  396,  395,  400,
      391,  392,  393,  395,  396,  389,  394,  398,  401,  402,
      395,  394,  399,  424,  397,    0,  398,  396,  402,  400,
      393,  397,  393,  398,  396,  395,  400,  399,  401,  402,
      395,  396,  399,  406,  398,  401,  402,  403,  404,  399,
      424,  397,  406,  398,  396,  402,  400,  403,  404,  403,
      408,  407,  425,  406,  399,  401,  402,  403,  404,  399,
      406,    0,  405,  426,  403,  404,  405,  407,  408,  406,

      408,  407,  409,  428,  403,  404,  403,  408,  407,  425,
      406,    0,  429,  410,  403,  404,  405,  409,  411,  405,
      426,  411,  409,  405,  407,  408,  410,  408,  407,  409,
      428,  430,  432,  410,  433,  434,  435,  439,  411,  429,
      410,  440,  442,  405,  409,  411,  443,  444,  411,  409,
      445,  446,  447,  410,  450,  448,  454,  456,  430,  432,
      410,  433,  434,  435,  439,  411,  448,  457,  440,  442,
      458,  459,  461,  443,  444,  462,  463,  445,  446,  447,
      464,  450,  448,  454,  456,  465,  468,  469,  470,  471,
      472,  473,  475,  448,  457,  476,  477,  458,  459,  461,

      478,  480,  462,  463,  481,  482,  483,  464,  484,  485,
      486,  487,  465,  468,  469,  470,  471,  472,  473,  475,
      489,  490,  476,  477,  494,  496,  492,  478,  480,  493,
      495,  481,  482,  483,  497,  484,  485,  486,  487,  492,
      574,    0,  493,  495,  494,  496,  492,  489,  490,  493,
      495,  494,  496,  492,  497,  498,  493,  495,    0,  498,
      499,  497,    0,  575,  503,  500,  492,  574,  499,  493,
      495,  494,  496,  492,  501,  576,  493,  495,  500,  498,
      499,  497,  498,  502,  503,  500,  498,  499,  504,  501,
      575,  503,  500,    0,  501,  499,  506,  502,  505,  507,

      506,  501,  576,  502,  504,  500,  498,  499,  504,  577,
      502,  503,  500,  505,  578,  504,  501,    0,  505,  507,
      506,  501,    0,  506,  502,  505,  507,  506,  511,  509,
      502,  504,  508,  509,  508,  504,  577,  510,    0,    0,
      505,  578,  512,    0,  510,  505,  507,  506,  511,  509,
      514,    0,  513,  512,  508,  511,  509,  510,  579,  508,
      509,  508,  512,  513,  510,  514,  516,  517,  518,  512,
      514,  510,  513,    0,  515,  511,  509,  514,  515,  513,
      512,  508,  580,  521,  510,  579,  516,  517,  518,  512,
      513,  520,  514,  516,  517,  518,  519,  514,  515,  513,

      519,  515,  520,  521,  529,  515,  523,  582,  522,  580,
      521,  520,    0,  516,  517,  518,  523,  522,  520,  524,
      519,  525,    0,  519,  529,  515,  523,  519,  522,  520,
      521,  529,  524,  523,  582,  522,  526,  527,  520,  524,
      525,  525,    0,  523,  522,    0,  524,  519,  525,  526,
      527,  529,  528,  523,  528,  522,  526,  527,  531,  524,
      532,    0,  530,  526,  527,  528,  524,  525,  525,  530,
      533,  534,  528,  535,  537,  583,  526,  527,  531,  528,
      532,  528,  530,  526,  527,  531,  534,  532,  536,  530,
      533,  534,  528,  535,  537,  536,  530,  533,  534,  528,

      535,  537,  583,    0,    0,  531,  539,  532,  536,  530,
      538,  540,  541,  534,  541,  536,  542,  533,  534,  539,
      535,  537,  536,  585,  538,    0,  539,  543,  546,  544,
      538,  540,  586,  539,  541,  536,  542,  538,  540,  541,
      543,  541,  544,  542,  545,  547,  539,  543,  546,  544,
      585,  538,  545,  539,  543,  546,  544,  538,  540,  586,
      549,  541,  548,  542,  545,  547,  548,  543,  549,  544,
      550,  545,  547,    0,  543,  546,  544,    0,  554,  545,
      549,  551,  553,  550,  553,    0,  548,  549,    0,  548,
      550,  545,  547,  548,  552,  549,  551,  550,  554,  555,

      557,  551,  552,  587,  553,  554,  588,  549,  551,  553,
      550,  553,  556,  548,  552,  559,  556,  550,  589,  555,
      557,  552,  590,  551,  558,  554,  555,  557,  551,  552,
      587,  553,  556,  588,  558,  559,  560,  591,  561,  556,
      561,  552,  559,  556,  558,  589,  555,  557,  562,  590,
      560,  558,  592,  563,  564,    0,  560,  562,  564,  556,
      561,  558,  559,  560,  591,  561,  567,  561,  562,  563,
      566,  558,  566,  563,  565,  562,  594,  560,  564,  592,
      563,  564,  568,  560,  562,  564,  567,  561,  569,  565,
      566,  570,  571,  567,  565,  562,  563,  566,  595,  566,

      563,  565,  568,  594,  569,  564,  596,  599,  569,  568,
      600,  570,  571,  567,  601,  569,  565,  566,  570,  571,
      602,  565,  607,  608,  609,  595,  612,  613,  614,  568,
      615,  569,  617,  596,  599,  569,  618,  600,  570,  571,
      619,  601,  620,  621,  622,  623,  624,  602,  626,  607,
      608,  609,  627,  612,  613,  614,  628,  615,  630,  617,
      631,  633,  634,  618,  636,    0,  637,  619,    0,  620,
      621,  622,  623,  624,  635,  626,  638,  638,  641,  627,
      642,  633,  634,  628,  636,  630,  637,  631,  633,  634,
      639,  636,  640,  637,  635,  635,    0,  638,  641,  639,

      642,  635,  640,  638,  638,  641,    0,  642,  633,  634,
      639,  636,  640,  637,  644,  645,  643,  639,  646,  640,
      694,  635,  635,  643,  638,  641,  639,  642,  648,  640,
        0,  647,  649,  646,  644,  645,  643,  639,  646,  640,
      647,  644,  645,  643,  696,  646,    0,  694,  648,  650,
      643,  647,  649,  652,  651,  648,    0,  652,  647,  649,
      646,  644,  645,  643,  650,  646,  654,  647,  651,  650,
      653,  696,  657,  652,  651,  648,  650,  653,  647,  649,
      652,  651,    0,  655,  652,  655,  654,  657,  658,  656,
      653,  650,  657,  654,    0,  651,  650,  653,  659,  657,

      652,  651,  656,  655,  653,    0,  660,  661,  658,  656,
      655,  697,  655,  654,  657,  658,  656,  653,  659,  657,
      664,  660,  665,  662,  663,  659,  660,  661,  698,  656,
      655,  663,  666,  660,  661,  658,  656,  662,  697,    0,
      664,  667,  665,  662,  663,  659,  671,  664,  660,  665,
      662,  663,  666,  660,  661,  698,  668,  670,  663,  666,
      668,  667,  669,    0,  662,  669,  671,  664,  667,  665,
      662,  663,  670,  671,  672,  673,  675,  670,  674,  666,
      668,    0,  669,  668,  670,    0,  676,  668,  667,  669,
      676,  674,  669,  671,  672,  673,  675,  699,  674,  670,

      677,  672,  673,  675,  670,  674,  676,  668,  678,  669,
      681,  679,  678,  676,  681,  680,  680,  676,  674,    0,
      677,  672,  673,  675,  699,  674,  679,  677,    0,  701,
      682,  679,  678,  676,  681,  678,  680,  681,  679,  678,
      684,  681,  680,  680,  682,    0,  686,  677,  685,  683,
      682,  704,  685,  679,  687,  684,  701,  682,  679,  678,
      684,  681,  683,  680,  688,  688,  686,  684,  689,  683,
      690,  682,  685,  686,  687,  685,  683,  682,  704,  685,
      691,  687,  684,  693,  709,  688,  712,  684,  689,  683,
      690,  688,  688,  686,  691,  689,  683,  690,  692,  685,

      691,  687,  692,  693,  715,  716,  718,  691,  719,  721,
      693,  709,  688,  712,  722,  689,  724,  690,  725,  728,
      730,  691,  692,  731,  732,  692,  737,  691,  738,  692,
      693,  715,  716,  718,  739,  719,  721,  741,    0,    0,
        0,  722,  744,  724,  788,  725,  728,  730,  738,  692,
      731,  732,  742,  737,  739,  738,  740,  741,  745,    0,
      743,  739,  744,    0,  741,  740,  742,  743,  746,  744,
      747,  788,  742,  745,    0,  738,  740,    0,  745,  742,
      743,  739,  749,  740,  741,  745,  750,  743,  746,  744,
      747,    0,  740,  742,  743,  746,  748,  747,  748,  742,

      745,  751,  749,  740,  752,  745,  750,  743,    0,  749,
      753,  792,  754,  750,  755,  746,  756,  747,  748,  753,
      757,  751,  758,  748,  752,  748,    0,    0,  751,  749,
      753,  752,  754,  750,  755,  760,  756,  753,  792,  754,
      757,  755,  758,  756,  761,  748,  753,  757,  751,  758,
      763,  752,  759,  762,  763,  760,  764,  753,    0,  754,
      762,  755,  760,  756,  761,  759,  766,  757,  767,  758,
      765,  761,  759,  762,  763,    0,  764,  763,  794,  759,
      762,  763,  760,  764,  769,  765,  766,  762,  767,    0,
      765,  761,  759,  766,  768,  767,  768,  765,  769,  759,

      762,  763,  770,  764,  769,  794,  771,  772,  773,    0,
      795,  769,  765,  766,  772,  767,  768,  765,    0,  777,
      774,  768,  770,  768,  774,  769,  771,  772,  773,  770,
      776,  769,  775,  771,  772,  773,  775,  795,  778,  777,
      779,  772,  780,  768,  774,  776,  777,  774,  797,  770,
      776,  774,  800,  771,  772,  773,  775,  776,  778,  775,
      779,  781,  780,  775,  801,  778,  777,  779,  781,  780,
      802,  774,  776,  804,  805,  797,  806,  776,  807,  800,
        0,  781,  808,  775,  809,  778,  811,  779,  781,  780,
      812,  801,  810,  804,  805,  781,  806,  802,  807,    0,

      804,  805,  808,  806,  809,  807,  811,  810,  781,  808,
      812,  809,  810,  811,  814,  813,  814,  812,  815,  810,
      804,  805,    0,  806,  817,  807,  818,  816,  820,  808,
      821,  809,    0,  811,  810,  813,  814,  812,  815,  810,
      816,  814,  813,  814,  817,  815,  818,  816,  820,  819,
      821,  817,    0,  818,  816,  820,  827,  821,  823,  822,
      824,  825,  813,  814,  819,  815,  823,  816,  829,  819,
      831,  817,  822,  818,  816,  820,  819,  821,  823,  822,
      824,  825,  832,  827,  834,  823,  822,  824,  825,  843,
      836,  819,  838,  823,    0,  829,  819,  831,  835,  822,

      839,  837,  841,  846,  834,  823,  822,  824,  825,  832,
      836,  834,  838,  835,  837,  840,  843,  836,  835,  838,
      839,  837,  841,  846,  847,  835,  840,  839,  837,  841,
      846,  834,  848,    0,  849,  840,  851,  836,  847,  838,
      835,  837,  840,    0,  847,  835,    0,  839,  837,  841,
      846,  847,  848,  840,  849,    0,  851,    0,    0,  848,
        0,  849,  840,  851,    0,  847,    0,    0,    0,    0,
        0,  847,    0,    0,    0,    0,    0,    0,    0,  848,
        0,  849,    0,  851,  853,    0,    0,  853,  854,    0,
      854,  854,  856,    0,  856,  856,  857,    0,  857,  857,

      858,    0,  858,  858,  859,    0,  859,  859,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "sqllib.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1516 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 50 "flex_lexer.l"


#line 1756 "flex_lexer.cpp"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 853 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 852 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 52 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 54 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 116:
#line 179 "flex_lexer.l"
case 117:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2463 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 853 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 853 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 852);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 210 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[Error] SQL Lexer: %s\n",msg); return 0;
}
